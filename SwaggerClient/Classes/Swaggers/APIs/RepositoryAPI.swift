//
// RepositoryAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class RepositoryAPI {
    /**
     Create a repository
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createCurrentUserRepo(body: CreateRepoOption? = nil, completion: @escaping ((_ data: Repository?,_ error: Error?) -> Void)) {
        createCurrentUserRepoWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a repository
     - POST /user/repos
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Repository> 
     */
    open class func createCurrentUserRepoWithRequestBuilder(body: CreateRepoOption? = nil) -> RequestBuilder<Repository> {
        let path = "/user/repos"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Repository>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Fork a repository
     - parameter owner: (path) owner of the repo to fork      - parameter repo: (path) name of the repo to fork      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createFork(owner: String, repo: String, body: CreateForkOption? = nil, completion: @escaping ((_ data: Repository?,_ error: Error?) -> Void)) {
        createForkWithRequestBuilder(owner: owner, repo: repo, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Fork a repository
     - POST /repos/{owner}/{repo}/forks
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo to fork      - parameter repo: (path) name of the repo to fork      - parameter body: (body)  (optional)

     - returns: RequestBuilder<Repository> 
     */
    open class func createForkWithRequestBuilder(owner: String, repo: String, body: CreateForkOption? = nil) -> RequestBuilder<Repository> {
        var path = "/repos/{owner}/{repo}/forks"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Repository>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Gets the tree of a repository.
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter sha: (path) sha of the commit      - parameter recursive: (query) show all directories and files (optional)     - parameter page: (query) page number; the &#x27;truncated&#x27; field in the response will be true if there are still more items after this page, false if the last page (optional)     - parameter perPage: (query) number of items per page; default is 1000 or what is set in app.ini as DEFAULT_GIT_TREES_PER_PAGE (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTree(owner: String, repo: String, sha: String, recursive: Bool? = nil, page: Int? = nil, perPage: Int? = nil, completion: @escaping ((_ data: GitTreeResponse?,_ error: Error?) -> Void)) {
        getTreeWithRequestBuilder(owner: owner, repo: repo, sha: sha, recursive: recursive, page: page, perPage: perPage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Gets the tree of a repository.
     - GET /repos/{owner}/{repo}/git/trees/{sha}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter sha: (path) sha of the commit      - parameter recursive: (query) show all directories and files (optional)     - parameter page: (query) page number; the &#x27;truncated&#x27; field in the response will be true if there are still more items after this page, false if the last page (optional)     - parameter perPage: (query) number of items per page; default is 1000 or what is set in app.ini as DEFAULT_GIT_TREES_PER_PAGE (optional)

     - returns: RequestBuilder<GitTreeResponse> 
     */
    open class func getTreeWithRequestBuilder(owner: String, repo: String, sha: String, recursive: Bool? = nil, page: Int? = nil, perPage: Int? = nil) -> RequestBuilder<GitTreeResponse> {
        var path = "/repos/{owner}/{repo}/git/trees/{sha}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let shaPreEscape = "\(sha)"
        let shaPostEscape = shaPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sha}", with: shaPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "recursive": recursive, 
                        "page": page?.encodeToJSON(), 
                        "per_page": perPage?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<GitTreeResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List a repository's forks
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func listForks(owner: String, repo: String, completion: @escaping ((_ data: [Repository]?,_ error: Error?) -> Void)) {
        listForksWithRequestBuilder(owner: owner, repo: repo).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List a repository's forks
     - GET /repos/{owner}/{repo}/forks
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 

     - returns: RequestBuilder<[Repository]> 
     */
    open class func listForksWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<[Repository]> {
        var path = "/repos/{owner}/{repo}/forks"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Repository]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Add a collaborator to a repository
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter collaborator: (path) username of the collaborator to add      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoAddCollaborator(owner: String, repo: String, collaborator: String, body: AddCollaboratorOption? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        repoAddCollaboratorWithRequestBuilder(owner: owner, repo: repo, collaborator: collaborator, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Add a collaborator to a repository
     - PUT /repos/{owner}/{repo}/collaborators/{collaborator}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter collaborator: (path) username of the collaborator to add      - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func repoAddCollaboratorWithRequestBuilder(owner: String, repo: String, collaborator: String, body: AddCollaboratorOption? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/collaborators/{collaborator}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let collaboratorPreEscape = "\(collaborator)"
        let collaboratorPostEscape = collaboratorPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{collaborator}", with: collaboratorPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Check if a user is a collaborator of a repository
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter collaborator: (path) username of the collaborator 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoCheckCollaborator(owner: String, repo: String, collaborator: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        repoCheckCollaboratorWithRequestBuilder(owner: owner, repo: repo, collaborator: collaborator).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Check if a user is a collaborator of a repository
     - GET /repos/{owner}/{repo}/collaborators/{collaborator}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter collaborator: (path) username of the collaborator 

     - returns: RequestBuilder<Void> 
     */
    open class func repoCheckCollaboratorWithRequestBuilder(owner: String, repo: String, collaborator: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/collaborators/{collaborator}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let collaboratorPreEscape = "\(collaborator)"
        let collaboratorPostEscape = collaboratorPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{collaborator}", with: collaboratorPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a hook
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoCreateHook(owner: String, repo: String, body: CreateHookOption? = nil, completion: @escaping ((_ data: Hook?,_ error: Error?) -> Void)) {
        repoCreateHookWithRequestBuilder(owner: owner, repo: repo, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a hook
     - POST /repos/{owner}/{repo}/hooks
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter body: (body)  (optional)

     - returns: RequestBuilder<Hook> 
     */
    open class func repoCreateHookWithRequestBuilder(owner: String, repo: String, body: CreateHookOption? = nil) -> RequestBuilder<Hook> {
        var path = "/repos/{owner}/{repo}/hooks"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Hook>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add a key to a repository
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoCreateKey(owner: String, repo: String, body: CreateKeyOption? = nil, completion: @escaping ((_ data: DeployKey?,_ error: Error?) -> Void)) {
        repoCreateKeyWithRequestBuilder(owner: owner, repo: repo, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add a key to a repository
     - POST /repos/{owner}/{repo}/keys
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter body: (body)  (optional)

     - returns: RequestBuilder<DeployKey> 
     */
    open class func repoCreateKeyWithRequestBuilder(owner: String, repo: String, body: CreateKeyOption? = nil) -> RequestBuilder<DeployKey> {
        var path = "/repos/{owner}/{repo}/keys"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DeployKey>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a pull request
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoCreatePullRequest(owner: String, repo: String, body: CreatePullRequestOption? = nil, completion: @escaping ((_ data: PullRequest?,_ error: Error?) -> Void)) {
        repoCreatePullRequestWithRequestBuilder(owner: owner, repo: repo, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a pull request
     - POST /repos/{owner}/{repo}/pulls
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter body: (body)  (optional)

     - returns: RequestBuilder<PullRequest> 
     */
    open class func repoCreatePullRequestWithRequestBuilder(owner: String, repo: String, body: CreatePullRequestOption? = nil) -> RequestBuilder<PullRequest> {
        var path = "/repos/{owner}/{repo}/pulls"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PullRequest>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a release
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoCreateRelease(owner: String, repo: String, body: CreateReleaseOption? = nil, completion: @escaping ((_ data: Release?,_ error: Error?) -> Void)) {
        repoCreateReleaseWithRequestBuilder(owner: owner, repo: repo, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a release
     - POST /repos/{owner}/{repo}/releases
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter body: (body)  (optional)

     - returns: RequestBuilder<Release> 
     */
    open class func repoCreateReleaseWithRequestBuilder(owner: String, repo: String, body: CreateReleaseOption? = nil) -> RequestBuilder<Release> {
        var path = "/repos/{owner}/{repo}/releases"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Release>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a release attachment
     - parameter attachment: (form)       - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the release      - parameter name: (query) name of the attachment (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoCreateReleaseAttachment(attachment: URL, owner: String, repo: String, _id: Int64, name: String? = nil, completion: @escaping ((_ data: Attachment?,_ error: Error?) -> Void)) {
        repoCreateReleaseAttachmentWithRequestBuilder(attachment: attachment, owner: owner, repo: repo, _id: _id, name: name).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a release attachment
     - POST /repos/{owner}/{repo}/releases/{id}/assets
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter attachment: (form)       - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the release      - parameter name: (query) name of the attachment (optional)

     - returns: RequestBuilder<Attachment> 
     */
    open class func repoCreateReleaseAttachmentWithRequestBuilder(attachment: URL, owner: String, repo: String, _id: Int64, name: String? = nil) -> RequestBuilder<Attachment> {
        var path = "/repos/{owner}/{repo}/releases/{id}/assets"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
                        "attachment": attachment
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "name": name
        ])

        let requestBuilder: RequestBuilder<Attachment>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a commit status
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter sha: (path) sha of the commit      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoCreateStatus(owner: String, repo: String, sha: String, body: CreateStatusOption? = nil, completion: @escaping ((_ data: [Status]?,_ error: Error?) -> Void)) {
        repoCreateStatusWithRequestBuilder(owner: owner, repo: repo, sha: sha, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a commit status
     - POST /repos/{owner}/{repo}/statuses/{sha}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter sha: (path) sha of the commit      - parameter body: (body)  (optional)

     - returns: RequestBuilder<[Status]> 
     */
    open class func repoCreateStatusWithRequestBuilder(owner: String, repo: String, sha: String, body: CreateStatusOption? = nil) -> RequestBuilder<[Status]> {
        var path = "/repos/{owner}/{repo}/statuses/{sha}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let shaPreEscape = "\(sha)"
        let shaPostEscape = shaPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sha}", with: shaPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Status]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a repository
     - parameter owner: (path) owner of the repo to delete      - parameter repo: (path) name of the repo to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoDelete(owner: String, repo: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        repoDeleteWithRequestBuilder(owner: owner, repo: repo).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a repository
     - DELETE /repos/{owner}/{repo}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo to delete      - parameter repo: (path) name of the repo to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func repoDeleteWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a collaborator from a repository
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter collaborator: (path) username of the collaborator to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoDeleteCollaborator(owner: String, repo: String, collaborator: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        repoDeleteCollaboratorWithRequestBuilder(owner: owner, repo: repo, collaborator: collaborator).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a collaborator from a repository
     - DELETE /repos/{owner}/{repo}/collaborators/{collaborator}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter collaborator: (path) username of the collaborator to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func repoDeleteCollaboratorWithRequestBuilder(owner: String, repo: String, collaborator: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/collaborators/{collaborator}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let collaboratorPreEscape = "\(collaborator)"
        let collaboratorPostEscape = collaboratorPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{collaborator}", with: collaboratorPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a hook in a repository
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the hook to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoDeleteHook(owner: String, repo: String, _id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        repoDeleteHookWithRequestBuilder(owner: owner, repo: repo, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a hook in a repository
     - DELETE /repos/{owner}/{repo}/hooks/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the hook to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func repoDeleteHookWithRequestBuilder(owner: String, repo: String, _id: Int64) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/hooks/{id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a key from a repository
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the key to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoDeleteKey(owner: String, repo: String, _id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        repoDeleteKeyWithRequestBuilder(owner: owner, repo: repo, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a key from a repository
     - DELETE /repos/{owner}/{repo}/keys/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the key to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func repoDeleteKeyWithRequestBuilder(owner: String, repo: String, _id: Int64) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/keys/{id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a release
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the release to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoDeleteRelease(owner: String, repo: String, _id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        repoDeleteReleaseWithRequestBuilder(owner: owner, repo: repo, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a release
     - DELETE /repos/{owner}/{repo}/releases/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the release to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func repoDeleteReleaseWithRequestBuilder(owner: String, repo: String, _id: Int64) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/releases/{id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a release attachment
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the release      - parameter attachmentId: (path) id of the attachment to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoDeleteReleaseAttachment(owner: String, repo: String, _id: Int64, attachmentId: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        repoDeleteReleaseAttachmentWithRequestBuilder(owner: owner, repo: repo, _id: _id, attachmentId: attachmentId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a release attachment
     - DELETE /repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the release      - parameter attachmentId: (path) id of the attachment to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func repoDeleteReleaseAttachmentWithRequestBuilder(owner: String, repo: String, _id: Int64, attachmentId: Int64) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let attachmentIdPreEscape = "\(attachmentId)"
        let attachmentIdPostEscape = attachmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{attachment_id}", with: attachmentIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Edit a hook in a repository
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) index of the hook      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoEditHook(owner: String, repo: String, _id: Int64, body: EditHookOption? = nil, completion: @escaping ((_ data: Hook?,_ error: Error?) -> Void)) {
        repoEditHookWithRequestBuilder(owner: owner, repo: repo, _id: _id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Edit a hook in a repository
     - PATCH /repos/{owner}/{repo}/hooks/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) index of the hook      - parameter body: (body)  (optional)

     - returns: RequestBuilder<Hook> 
     */
    open class func repoEditHookWithRequestBuilder(owner: String, repo: String, _id: Int64, body: EditHookOption? = nil) -> RequestBuilder<Hook> {
        var path = "/repos/{owner}/{repo}/hooks/{id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Hook>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a pull request
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the pull request to edit      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoEditPullRequest(owner: String, repo: String, index: Int64, body: EditPullRequestOption? = nil, completion: @escaping ((_ data: PullRequest?,_ error: Error?) -> Void)) {
        repoEditPullRequestWithRequestBuilder(owner: owner, repo: repo, index: index, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a pull request
     - PATCH /repos/{owner}/{repo}/pulls/{index}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the pull request to edit      - parameter body: (body)  (optional)

     - returns: RequestBuilder<PullRequest> 
     */
    open class func repoEditPullRequestWithRequestBuilder(owner: String, repo: String, index: Int64, body: EditPullRequestOption? = nil) -> RequestBuilder<PullRequest> {
        var path = "/repos/{owner}/{repo}/pulls/{index}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PullRequest>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a release
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the release to edit      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoEditRelease(owner: String, repo: String, _id: Int64, body: EditReleaseOption? = nil, completion: @escaping ((_ data: Release?,_ error: Error?) -> Void)) {
        repoEditReleaseWithRequestBuilder(owner: owner, repo: repo, _id: _id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a release
     - PATCH /repos/{owner}/{repo}/releases/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the release to edit      - parameter body: (body)  (optional)

     - returns: RequestBuilder<Release> 
     */
    open class func repoEditReleaseWithRequestBuilder(owner: String, repo: String, _id: Int64, body: EditReleaseOption? = nil) -> RequestBuilder<Release> {
        var path = "/repos/{owner}/{repo}/releases/{id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Release>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Edit a release attachment
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the release      - parameter attachmentId: (path) id of the attachment to edit      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoEditReleaseAttachment(owner: String, repo: String, _id: Int64, attachmentId: Int64, body: EditAttachmentOptions? = nil, completion: @escaping ((_ data: Attachment?,_ error: Error?) -> Void)) {
        repoEditReleaseAttachmentWithRequestBuilder(owner: owner, repo: repo, _id: _id, attachmentId: attachmentId, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Edit a release attachment
     - PATCH /repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the release      - parameter attachmentId: (path) id of the attachment to edit      - parameter body: (body)  (optional)

     - returns: RequestBuilder<Attachment> 
     */
    open class func repoEditReleaseAttachmentWithRequestBuilder(owner: String, repo: String, _id: Int64, attachmentId: Int64, body: EditAttachmentOptions? = nil) -> RequestBuilder<Attachment> {
        var path = "/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let attachmentIdPreEscape = "\(attachmentId)"
        let attachmentIdPostEscape = attachmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{attachment_id}", with: attachmentIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Attachment>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get a repository
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoGet(owner: String, repo: String, completion: @escaping ((_ data: Repository?,_ error: Error?) -> Void)) {
        repoGetWithRequestBuilder(owner: owner, repo: repo).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a repository
     - GET /repos/{owner}/{repo}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 

     - returns: RequestBuilder<Repository> 
     */
    open class func repoGetWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<Repository> {
        var path = "/repos/{owner}/{repo}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Repository>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get an archive of a repository
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter archive: (path) archive to download, consisting of a git reference and archive 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoGetArchive(owner: String, repo: String, archive: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        repoGetArchiveWithRequestBuilder(owner: owner, repo: repo, archive: archive).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get an archive of a repository
     - GET /repos/{owner}/{repo}/archive/{archive}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter archive: (path) archive to download, consisting of a git reference and archive 

     - returns: RequestBuilder<Void> 
     */
    open class func repoGetArchiveWithRequestBuilder(owner: String, repo: String, archive: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/archive/{archive}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let archivePreEscape = "\(archive)"
        let archivePostEscape = archivePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{archive}", with: archivePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Retrieve a specific branch from a repository
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter branch: (path) branch to get 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoGetBranch(owner: String, repo: String, branch: String, completion: @escaping ((_ data: Branch?,_ error: Error?) -> Void)) {
        repoGetBranchWithRequestBuilder(owner: owner, repo: repo, branch: branch).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Retrieve a specific branch from a repository
     - GET /repos/{owner}/{repo}/branches/{branch}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter branch: (path) branch to get 

     - returns: RequestBuilder<Branch> 
     */
    open class func repoGetBranchWithRequestBuilder(owner: String, repo: String, branch: String) -> RequestBuilder<Branch> {
        var path = "/repos/{owner}/{repo}/branches/{branch}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let branchPreEscape = "\(branch)"
        let branchPostEscape = branchPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{branch}", with: branchPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Branch>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a repository by id
     - parameter _id: (path) id of the repo to get 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoGetByID(_id: Int64, completion: @escaping ((_ data: Repository?,_ error: Error?) -> Void)) {
        repoGetByIDWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a repository by id
     - GET /repositories/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter _id: (path) id of the repo to get 

     - returns: RequestBuilder<Repository> 
     */
    open class func repoGetByIDWithRequestBuilder(_id: Int64) -> RequestBuilder<Repository> {
        var path = "/repositories/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Repository>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a commit's combined status, by branch/tag/commit reference
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter ref: (path) name of branch/tag/commit 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoGetCombinedStatusByRef(owner: String, repo: String, ref: String, completion: @escaping ((_ data: Status?,_ error: Error?) -> Void)) {
        repoGetCombinedStatusByRefWithRequestBuilder(owner: owner, repo: repo, ref: ref).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a commit's combined status, by branch/tag/commit reference
     - GET /repos/{owner}/{repo}/commits/{ref}/statuses
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter ref: (path) name of branch/tag/commit 

     - returns: RequestBuilder<Status> 
     */
    open class func repoGetCombinedStatusByRefWithRequestBuilder(owner: String, repo: String, ref: String) -> RequestBuilder<Status> {
        var path = "/repos/{owner}/{repo}/commits/{ref}/statuses"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let refPreEscape = "\(ref)"
        let refPostEscape = refPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ref}", with: refPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Status>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the EditorConfig definitions of a file in a repository
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter filepath: (path) filepath of file to get 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoGetEditorConfig(owner: String, repo: String, filepath: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        repoGetEditorConfigWithRequestBuilder(owner: owner, repo: repo, filepath: filepath).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get the EditorConfig definitions of a file in a repository
     - GET /repos/{owner}/{repo}/editorconfig/{filepath}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter filepath: (path) filepath of file to get 

     - returns: RequestBuilder<Void> 
     */
    open class func repoGetEditorConfigWithRequestBuilder(owner: String, repo: String, filepath: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/editorconfig/{filepath}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let filepathPreEscape = "\(filepath)"
        let filepathPostEscape = filepathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{filepath}", with: filepathPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a hook
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the hook to get 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoGetHook(owner: String, repo: String, _id: Int64, completion: @escaping ((_ data: Hook?,_ error: Error?) -> Void)) {
        repoGetHookWithRequestBuilder(owner: owner, repo: repo, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a hook
     - GET /repos/{owner}/{repo}/hooks/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the hook to get 

     - returns: RequestBuilder<Hook> 
     */
    open class func repoGetHookWithRequestBuilder(owner: String, repo: String, _id: Int64) -> RequestBuilder<Hook> {
        var path = "/repos/{owner}/{repo}/hooks/{id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Hook>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a repository's key by id
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the key to get 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoGetKey(owner: String, repo: String, _id: Int64, completion: @escaping ((_ data: DeployKey?,_ error: Error?) -> Void)) {
        repoGetKeyWithRequestBuilder(owner: owner, repo: repo, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a repository's key by id
     - GET /repos/{owner}/{repo}/keys/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the key to get 

     - returns: RequestBuilder<DeployKey> 
     */
    open class func repoGetKeyWithRequestBuilder(owner: String, repo: String, _id: Int64) -> RequestBuilder<DeployKey> {
        var path = "/repos/{owner}/{repo}/keys/{id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<DeployKey>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a pull request
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the pull request to get 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoGetPullRequest(owner: String, repo: String, index: Int64, completion: @escaping ((_ data: PullRequest?,_ error: Error?) -> Void)) {
        repoGetPullRequestWithRequestBuilder(owner: owner, repo: repo, index: index).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a pull request
     - GET /repos/{owner}/{repo}/pulls/{index}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the pull request to get 

     - returns: RequestBuilder<PullRequest> 
     */
    open class func repoGetPullRequestWithRequestBuilder(owner: String, repo: String, index: Int64) -> RequestBuilder<PullRequest> {
        var path = "/repos/{owner}/{repo}/pulls/{index}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PullRequest>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a file from a repository
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter filepath: (path) filepath of the file to get 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoGetRawFile(owner: String, repo: String, filepath: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        repoGetRawFileWithRequestBuilder(owner: owner, repo: repo, filepath: filepath).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get a file from a repository
     - GET /repos/{owner}/{repo}/raw/{filepath}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter filepath: (path) filepath of the file to get 

     - returns: RequestBuilder<Void> 
     */
    open class func repoGetRawFileWithRequestBuilder(owner: String, repo: String, filepath: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/raw/{filepath}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let filepathPreEscape = "\(filepath)"
        let filepathPostEscape = filepathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{filepath}", with: filepathPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a release
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the release to get 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoGetRelease(owner: String, repo: String, _id: Int64, completion: @escaping ((_ data: Release?,_ error: Error?) -> Void)) {
        repoGetReleaseWithRequestBuilder(owner: owner, repo: repo, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a release
     - GET /repos/{owner}/{repo}/releases/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the release to get 

     - returns: RequestBuilder<Release> 
     */
    open class func repoGetReleaseWithRequestBuilder(owner: String, repo: String, _id: Int64) -> RequestBuilder<Release> {
        var path = "/repos/{owner}/{repo}/releases/{id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Release>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a release attachment
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the release      - parameter attachmentId: (path) id of the attachment to get 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoGetReleaseAttachment(owner: String, repo: String, _id: Int64, attachmentId: Int64, completion: @escaping ((_ data: Attachment?,_ error: Error?) -> Void)) {
        repoGetReleaseAttachmentWithRequestBuilder(owner: owner, repo: repo, _id: _id, attachmentId: attachmentId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a release attachment
     - GET /repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the release      - parameter attachmentId: (path) id of the attachment to get 

     - returns: RequestBuilder<Attachment> 
     */
    open class func repoGetReleaseAttachmentWithRequestBuilder(owner: String, repo: String, _id: Int64, attachmentId: Int64) -> RequestBuilder<Attachment> {
        var path = "/repos/{owner}/{repo}/releases/{id}/assets/{attachment_id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let attachmentIdPreEscape = "\(attachmentId)"
        let attachmentIdPostEscape = attachmentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{attachment_id}", with: attachmentIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Attachment>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a single commit from a repository
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter sha: (path) the commit hash 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoGetSingleCommit(owner: String, repo: String, sha: String, completion: @escaping ((_ data: Commit?,_ error: Error?) -> Void)) {
        repoGetSingleCommitWithRequestBuilder(owner: owner, repo: repo, sha: sha).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a single commit from a repository
     - GET /repos/{owner}/{repo}/git/commits/{sha}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter sha: (path) the commit hash 

     - returns: RequestBuilder<Commit> 
     */
    open class func repoGetSingleCommitWithRequestBuilder(owner: String, repo: String, sha: String) -> RequestBuilder<Commit> {
        var path = "/repos/{owner}/{repo}/git/commits/{sha}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let shaPreEscape = "\(sha)"
        let shaPostEscape = shaPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sha}", with: shaPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Commit>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get specified ref or filtered repository's refs
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoListAllGitRefs(owner: String, repo: String, completion: @escaping ((_ data: [Reference]?,_ error: Error?) -> Void)) {
        repoListAllGitRefsWithRequestBuilder(owner: owner, repo: repo).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get specified ref or filtered repository's refs
     - GET /repos/{owner}/{repo}/git/refs
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 

     - returns: RequestBuilder<[Reference]> 
     */
    open class func repoListAllGitRefsWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<[Reference]> {
        var path = "/repos/{owner}/{repo}/git/refs"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Reference]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List a repository's branches
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoListBranches(owner: String, repo: String, completion: @escaping ((_ data: [Branch]?,_ error: Error?) -> Void)) {
        repoListBranchesWithRequestBuilder(owner: owner, repo: repo).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List a repository's branches
     - GET /repos/{owner}/{repo}/branches
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 

     - returns: RequestBuilder<[Branch]> 
     */
    open class func repoListBranchesWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<[Branch]> {
        var path = "/repos/{owner}/{repo}/branches"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Branch]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List a repository's collaborators
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoListCollaborators(owner: String, repo: String, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        repoListCollaboratorsWithRequestBuilder(owner: owner, repo: repo).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List a repository's collaborators
     - GET /repos/{owner}/{repo}/collaborators
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 

     - returns: RequestBuilder<[User]> 
     */
    open class func repoListCollaboratorsWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<[User]> {
        var path = "/repos/{owner}/{repo}/collaborators"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[User]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get specified ref or filtered repository's refs
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter ref: (path) part or full name of the ref 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoListGitRefs(owner: String, repo: String, ref: String, completion: @escaping ((_ data: [Reference]?,_ error: Error?) -> Void)) {
        repoListGitRefsWithRequestBuilder(owner: owner, repo: repo, ref: ref).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get specified ref or filtered repository's refs
     - GET /repos/{owner}/{repo}/git/refs/{ref}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter ref: (path) part or full name of the ref 

     - returns: RequestBuilder<[Reference]> 
     */
    open class func repoListGitRefsWithRequestBuilder(owner: String, repo: String, ref: String) -> RequestBuilder<[Reference]> {
        var path = "/repos/{owner}/{repo}/git/refs/{ref}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let refPreEscape = "\(ref)"
        let refPostEscape = refPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{ref}", with: refPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Reference]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List the hooks in a repository
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoListHooks(owner: String, repo: String, completion: @escaping ((_ data: [Hook]?,_ error: Error?) -> Void)) {
        repoListHooksWithRequestBuilder(owner: owner, repo: repo).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List the hooks in a repository
     - GET /repos/{owner}/{repo}/hooks
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 

     - returns: RequestBuilder<[Hook]> 
     */
    open class func repoListHooksWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<[Hook]> {
        var path = "/repos/{owner}/{repo}/hooks"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Hook]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List a repository's keys
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter keyId: (query) the key_id to search for (optional)     - parameter fingerprint: (query) fingerprint of the key (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoListKeys(owner: String, repo: String, keyId: Int? = nil, fingerprint: String? = nil, completion: @escaping ((_ data: [DeployKey]?,_ error: Error?) -> Void)) {
        repoListKeysWithRequestBuilder(owner: owner, repo: repo, keyId: keyId, fingerprint: fingerprint).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List a repository's keys
     - GET /repos/{owner}/{repo}/keys
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter keyId: (query) the key_id to search for (optional)     - parameter fingerprint: (query) fingerprint of the key (optional)

     - returns: RequestBuilder<[DeployKey]> 
     */
    open class func repoListKeysWithRequestBuilder(owner: String, repo: String, keyId: Int? = nil, fingerprint: String? = nil) -> RequestBuilder<[DeployKey]> {
        var path = "/repos/{owner}/{repo}/keys"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "key_id": keyId?.encodeToJSON(), 
                        "fingerprint": fingerprint
        ])

        let requestBuilder: RequestBuilder<[DeployKey]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter state
     */
    public enum State_repoListPullRequests: String { 
        case closed = "closed"
        case _open = "open"
        case all = "all"
    }

    /**
     * enum for parameter sort
     */
    public enum Sort_repoListPullRequests: String { 
        case oldest = "oldest"
        case recentupdate = "recentupdate"
        case leastupdate = "leastupdate"
        case mostcomment = "mostcomment"
        case leastcomment = "leastcomment"
        case priority = "priority"
    }

    /**
     List a repo's pull requests
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter page: (query) Page number (optional)     - parameter state: (query) State of pull request: open or closed (optional) (optional)     - parameter sort: (query) Type of sort (optional)     - parameter milestone: (query) ID of the milestone (optional)     - parameter labels: (query) Label IDs (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoListPullRequests(owner: String, repo: String, page: Int? = nil, state: State_repoListPullRequests? = nil, sort: Sort_repoListPullRequests? = nil, milestone: Int64? = nil, labels: [Int64]? = nil, completion: @escaping ((_ data: [PullRequest]?,_ error: Error?) -> Void)) {
        repoListPullRequestsWithRequestBuilder(owner: owner, repo: repo, page: page, state: state, sort: sort, milestone: milestone, labels: labels).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List a repo's pull requests
     - GET /repos/{owner}/{repo}/pulls
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter page: (query) Page number (optional)     - parameter state: (query) State of pull request: open or closed (optional) (optional)     - parameter sort: (query) Type of sort (optional)     - parameter milestone: (query) ID of the milestone (optional)     - parameter labels: (query) Label IDs (optional)

     - returns: RequestBuilder<[PullRequest]> 
     */
    open class func repoListPullRequestsWithRequestBuilder(owner: String, repo: String, page: Int? = nil, state: State_repoListPullRequests? = nil, sort: Sort_repoListPullRequests? = nil, milestone: Int64? = nil, labels: [Int64]? = nil) -> RequestBuilder<[PullRequest]> {
        var path = "/repos/{owner}/{repo}/pulls"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page?.encodeToJSON(), 
                        "state": state?.rawValue, 
                        "sort": sort?.rawValue, 
                        "milestone": milestone?.encodeToJSON(), 
                        "labels": labels
        ])

        let requestBuilder: RequestBuilder<[PullRequest]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List release's attachments
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the release 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoListReleaseAttachments(owner: String, repo: String, _id: Int64, completion: @escaping ((_ data: [Attachment]?,_ error: Error?) -> Void)) {
        repoListReleaseAttachmentsWithRequestBuilder(owner: owner, repo: repo, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List release's attachments
     - GET /repos/{owner}/{repo}/releases/{id}/assets
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the release 

     - returns: RequestBuilder<[Attachment]> 
     */
    open class func repoListReleaseAttachmentsWithRequestBuilder(owner: String, repo: String, _id: Int64) -> RequestBuilder<[Attachment]> {
        var path = "/repos/{owner}/{repo}/releases/{id}/assets"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Attachment]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List a repo's releases
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter page: (query) page wants to load (optional)     - parameter perPage: (query) items count every page wants to load (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoListReleases(owner: String, repo: String, page: Int? = nil, perPage: Int? = nil, completion: @escaping ((_ data: [Release]?,_ error: Error?) -> Void)) {
        repoListReleasesWithRequestBuilder(owner: owner, repo: repo, page: page, perPage: perPage).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List a repo's releases
     - GET /repos/{owner}/{repo}/releases
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter page: (query) page wants to load (optional)     - parameter perPage: (query) items count every page wants to load (optional)

     - returns: RequestBuilder<[Release]> 
     */
    open class func repoListReleasesWithRequestBuilder(owner: String, repo: String, page: Int? = nil, perPage: Int? = nil) -> RequestBuilder<[Release]> {
        var path = "/repos/{owner}/{repo}/releases"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "page": page?.encodeToJSON(), 
                        "per_page": perPage?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<[Release]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List a repo's stargazers
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoListStargazers(owner: String, repo: String, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        repoListStargazersWithRequestBuilder(owner: owner, repo: repo).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List a repo's stargazers
     - GET /repos/{owner}/{repo}/stargazers
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 

     - returns: RequestBuilder<[User]> 
     */
    open class func repoListStargazersWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<[User]> {
        var path = "/repos/{owner}/{repo}/stargazers"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[User]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a commit's statuses
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter sha: (path) sha of the commit 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoListStatuses(owner: String, repo: String, sha: String, completion: @escaping ((_ data: [Status]?,_ error: Error?) -> Void)) {
        repoListStatusesWithRequestBuilder(owner: owner, repo: repo, sha: sha).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a commit's statuses
     - GET /repos/{owner}/{repo}/statuses/{sha}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter sha: (path) sha of the commit 

     - returns: RequestBuilder<[Status]> 
     */
    open class func repoListStatusesWithRequestBuilder(owner: String, repo: String, sha: String) -> RequestBuilder<[Status]> {
        var path = "/repos/{owner}/{repo}/statuses/{sha}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let shaPreEscape = "\(sha)"
        let shaPostEscape = shaPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sha}", with: shaPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Status]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List a repo's watchers
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoListSubscribers(owner: String, repo: String, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        repoListSubscribersWithRequestBuilder(owner: owner, repo: repo).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List a repo's watchers
     - GET /repos/{owner}/{repo}/subscribers
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 

     - returns: RequestBuilder<[User]> 
     */
    open class func repoListSubscribersWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<[User]> {
        var path = "/repos/{owner}/{repo}/subscribers"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[User]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List a repository's tags
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoListTags(owner: String, repo: String, completion: @escaping ((_ data: [Tag]?,_ error: Error?) -> Void)) {
        repoListTagsWithRequestBuilder(owner: owner, repo: repo).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List a repository's tags
     - GET /repos/{owner}/{repo}/tags
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 

     - returns: RequestBuilder<[Tag]> 
     */
    open class func repoListTagsWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<[Tag]> {
        var path = "/repos/{owner}/{repo}/tags"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Tag]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Merge a pull request
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the pull request to merge      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoMergePullRequest(owner: String, repo: String, index: Int64, body: MergePullRequestOption? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        repoMergePullRequestWithRequestBuilder(owner: owner, repo: repo, index: index, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Merge a pull request
     - POST /repos/{owner}/{repo}/pulls/{index}/merge
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the pull request to merge      - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func repoMergePullRequestWithRequestBuilder(owner: String, repo: String, index: Int64, body: MergePullRequestOption? = nil) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/pulls/{index}/merge"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Migrate a remote git repository
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoMigrate(body: MigrateRepoForm? = nil, completion: @escaping ((_ data: Repository?,_ error: Error?) -> Void)) {
        repoMigrateWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Migrate a remote git repository
     - POST /repos/migrate
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Repository> 
     */
    open class func repoMigrateWithRequestBuilder(body: MigrateRepoForm? = nil) -> RequestBuilder<Repository> {
        let path = "/repos/migrate"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Repository>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Sync a mirrored repository
     - parameter owner: (path) owner of the repo to sync      - parameter repo: (path) name of the repo to sync 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoMirrorSync(owner: String, repo: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        repoMirrorSyncWithRequestBuilder(owner: owner, repo: repo).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Sync a mirrored repository
     - POST /repos/{owner}/{repo}/mirror-sync
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo to sync      - parameter repo: (path) name of the repo to sync 

     - returns: RequestBuilder<Void> 
     */
    open class func repoMirrorSyncWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/mirror-sync"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check if a pull request has been merged
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the pull request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoPullRequestIsMerged(owner: String, repo: String, index: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        repoPullRequestIsMergedWithRequestBuilder(owner: owner, repo: repo, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Check if a pull request has been merged
     - GET /repos/{owner}/{repo}/pulls/{index}/merge
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the pull request 

     - returns: RequestBuilder<Void> 
     */
    open class func repoPullRequestIsMergedWithRequestBuilder(owner: String, repo: String, index: Int64) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/pulls/{index}/merge"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search for repositories
     - parameter q: (query) keyword (optional)     - parameter uid: (query) search only for repos that the user with the given id owns or contributes to (optional)     - parameter page: (query) page number of results to return (1-based) (optional)     - parameter limit: (query) page size of results, maximum page size is 50 (optional)     - parameter mode: (query) type of repository to search for. Supported values are \&quot;fork\&quot;, \&quot;source\&quot;, \&quot;mirror\&quot; and \&quot;collaborative\&quot; (optional)     - parameter exclusive: (query) if &#x60;uid&#x60; is given, search only for repos that the user owns (optional)     - parameter sort: (query) sort repos by attribute. Supported values are \&quot;alpha\&quot;, \&quot;created\&quot;, \&quot;updated\&quot;, \&quot;size\&quot;, and \&quot;id\&quot;. Default is \&quot;alpha\&quot; (optional)     - parameter order: (query) sort order, either \&quot;asc\&quot; (ascending) or \&quot;desc\&quot; (descending). Default is \&quot;asc\&quot;, ignored if \&quot;sort\&quot; is not specified. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoSearch(q: String? = nil, uid: Int64? = nil, page: Int? = nil, limit: Int? = nil, mode: String? = nil, exclusive: Bool? = nil, sort: String? = nil, order: String? = nil, completion: @escaping ((_ data: SearchResults?,_ error: Error?) -> Void)) {
        repoSearchWithRequestBuilder(q: q, uid: uid, page: page, limit: limit, mode: mode, exclusive: exclusive, sort: sort, order: order).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search for repositories
     - GET /repos/search
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter q: (query) keyword (optional)     - parameter uid: (query) search only for repos that the user with the given id owns or contributes to (optional)     - parameter page: (query) page number of results to return (1-based) (optional)     - parameter limit: (query) page size of results, maximum page size is 50 (optional)     - parameter mode: (query) type of repository to search for. Supported values are \&quot;fork\&quot;, \&quot;source\&quot;, \&quot;mirror\&quot; and \&quot;collaborative\&quot; (optional)     - parameter exclusive: (query) if &#x60;uid&#x60; is given, search only for repos that the user owns (optional)     - parameter sort: (query) sort repos by attribute. Supported values are \&quot;alpha\&quot;, \&quot;created\&quot;, \&quot;updated\&quot;, \&quot;size\&quot;, and \&quot;id\&quot;. Default is \&quot;alpha\&quot; (optional)     - parameter order: (query) sort order, either \&quot;asc\&quot; (ascending) or \&quot;desc\&quot; (descending). Default is \&quot;asc\&quot;, ignored if \&quot;sort\&quot; is not specified. (optional)

     - returns: RequestBuilder<SearchResults> 
     */
    open class func repoSearchWithRequestBuilder(q: String? = nil, uid: Int64? = nil, page: Int? = nil, limit: Int? = nil, mode: String? = nil, exclusive: Bool? = nil, sort: String? = nil, order: String? = nil) -> RequestBuilder<SearchResults> {
        let path = "/repos/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "uid": uid?.encodeToJSON(), 
                        "page": page?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON(), 
                        "mode": mode, 
                        "exclusive": exclusive, 
                        "sort": sort, 
                        "order": order
        ])

        let requestBuilder: RequestBuilder<SearchResults>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Test a push webhook
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the hook to test 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoTestHook(owner: String, repo: String, _id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        repoTestHookWithRequestBuilder(owner: owner, repo: repo, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Test a push webhook
     - POST /repos/{owner}/{repo}/hooks/{id}/tests
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the hook to test 

     - returns: RequestBuilder<Void> 
     */
    open class func repoTestHookWithRequestBuilder(owner: String, repo: String, _id: Int64) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/hooks/{id}/tests"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List a repo's tracked times
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func repoTrackedTimes(owner: String, repo: String, completion: @escaping ((_ data: [TrackedTime]?,_ error: Error?) -> Void)) {
        repoTrackedTimesWithRequestBuilder(owner: owner, repo: repo).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List a repo's tracked times
     - GET /repos/{owner}/{repo}/times
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 

     - returns: RequestBuilder<[TrackedTime]> 
     */
    open class func repoTrackedTimesWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<[TrackedTime]> {
        var path = "/repos/{owner}/{repo}/times"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[TrackedTime]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     search topics via keyword
     - parameter q: (query) keywords to search 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func topicSearch(q: String, completion: @escaping ((_ data: Repository?,_ error: Error?) -> Void)) {
        topicSearchWithRequestBuilder(q: q).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     search topics via keyword
     - GET /topics/search
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter q: (query) keywords to search 

     - returns: RequestBuilder<Repository> 
     */
    open class func topicSearchWithRequestBuilder(q: String) -> RequestBuilder<Repository> {
        let path = "/topics/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q
        ])

        let requestBuilder: RequestBuilder<Repository>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check if the current user is watching a repo
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCurrentCheckSubscription(owner: String, repo: String, completion: @escaping ((_ data: WatchInfo?,_ error: Error?) -> Void)) {
        userCurrentCheckSubscriptionWithRequestBuilder(owner: owner, repo: repo).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Check if the current user is watching a repo
     - GET /repos/{owner}/{repo}/subscription
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 

     - returns: RequestBuilder<WatchInfo> 
     */
    open class func userCurrentCheckSubscriptionWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<WatchInfo> {
        var path = "/repos/{owner}/{repo}/subscription"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WatchInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unwatch a repo
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCurrentDeleteSubscription(owner: String, repo: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userCurrentDeleteSubscriptionWithRequestBuilder(owner: owner, repo: repo).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Unwatch a repo
     - DELETE /repos/{owner}/{repo}/subscription
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 

     - returns: RequestBuilder<Void> 
     */
    open class func userCurrentDeleteSubscriptionWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/subscription"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Watch a repo
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCurrentPutSubscription(owner: String, repo: String, completion: @escaping ((_ data: WatchInfo?,_ error: Error?) -> Void)) {
        userCurrentPutSubscriptionWithRequestBuilder(owner: owner, repo: repo).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Watch a repo
     - PUT /repos/{owner}/{repo}/subscription
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 

     - returns: RequestBuilder<WatchInfo> 
     */
    open class func userCurrentPutSubscriptionWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<WatchInfo> {
        var path = "/repos/{owner}/{repo}/subscription"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<WatchInfo>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
