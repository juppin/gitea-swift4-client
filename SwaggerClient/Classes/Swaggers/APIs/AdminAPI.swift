//
// AdminAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class AdminAPI {
    /**
     Create an organization
     - parameter body: (body)       - parameter username: (path) username of the user that will own the created organization 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func adminCreateOrg(body: CreateOrgOption, username: String, completion: @escaping ((_ data: Organization?,_ error: Error?) -> Void)) {
        adminCreateOrgWithRequestBuilder(body: body, username: username).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create an organization
     - POST /admin/users/{username}/orgs
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter body: (body)       - parameter username: (path) username of the user that will own the created organization 

     - returns: RequestBuilder<Organization> 
     */
    open class func adminCreateOrgWithRequestBuilder(body: CreateOrgOption, username: String) -> RequestBuilder<Organization> {
        var path = "/admin/users/{username}/orgs"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Organization>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add a public key on behalf of a user
     - parameter username: (path) username of the user      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func adminCreatePublicKey(username: String, body: CreateKeyOption? = nil, completion: @escaping ((_ data: PublicKey?,_ error: Error?) -> Void)) {
        adminCreatePublicKeyWithRequestBuilder(username: username, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add a public key on behalf of a user
     - POST /admin/users/{username}/keys
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter username: (path) username of the user      - parameter body: (body)  (optional)

     - returns: RequestBuilder<PublicKey> 
     */
    open class func adminCreatePublicKeyWithRequestBuilder(username: String, body: CreateKeyOption? = nil) -> RequestBuilder<PublicKey> {
        var path = "/admin/users/{username}/keys"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PublicKey>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a repository on behalf a user
     - parameter body: (body)       - parameter username: (path) username of the user. This user will own the created repository 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func adminCreateRepo(body: CreateRepoOption, username: String, completion: @escaping ((_ data: Repository?,_ error: Error?) -> Void)) {
        adminCreateRepoWithRequestBuilder(body: body, username: username).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a repository on behalf a user
     - POST /admin/users/{username}/repos
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter body: (body)       - parameter username: (path) username of the user. This user will own the created repository 

     - returns: RequestBuilder<Repository> 
     */
    open class func adminCreateRepoWithRequestBuilder(body: CreateRepoOption, username: String) -> RequestBuilder<Repository> {
        var path = "/admin/users/{username}/repos"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Repository>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a user
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func adminCreateUser(body: CreateUserOption? = nil, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        adminCreateUserWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a user
     - POST /admin/users
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<User> 
     */
    open class func adminCreateUserWithRequestBuilder(body: CreateUserOption? = nil) -> RequestBuilder<User> {
        let path = "/admin/users"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a user
     - parameter username: (path) username of user to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func adminDeleteUser(username: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        adminDeleteUserWithRequestBuilder(username: username).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a user
     - DELETE /admin/users/{username}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter username: (path) username of user to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func adminDeleteUserWithRequestBuilder(username: String) -> RequestBuilder<Void> {
        var path = "/admin/users/{username}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a user's public key
     - parameter username: (path) username of user      - parameter _id: (path) id of the key to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func adminDeleteUserPublicKey(username: String, _id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        adminDeleteUserPublicKeyWithRequestBuilder(username: username, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a user's public key
     - DELETE /admin/users/{username}/keys/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter username: (path) username of user      - parameter _id: (path) id of the key to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func adminDeleteUserPublicKeyWithRequestBuilder(username: String, _id: Int64) -> RequestBuilder<Void> {
        var path = "/admin/users/{username}/keys/{id}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Edit an existing user
     - parameter username: (path) username of user to edit      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func adminEditUser(username: String, body: EditUserOption? = nil, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        adminEditUserWithRequestBuilder(username: username, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Edit an existing user
     - PATCH /admin/users/{username}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter username: (path) username of user to edit      - parameter body: (body)  (optional)

     - returns: RequestBuilder<User> 
     */
    open class func adminEditUserWithRequestBuilder(username: String, body: EditUserOption? = nil) -> RequestBuilder<User> {
        var path = "/admin/users/{username}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     List all organizations

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func adminGetAllOrgs(completion: @escaping ((_ data: [Organization]?,_ error: Error?) -> Void)) {
        adminGetAllOrgsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List all organizations
     - GET /admin/orgs
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token

     - returns: RequestBuilder<[Organization]> 
     */
    open class func adminGetAllOrgsWithRequestBuilder() -> RequestBuilder<[Organization]> {
        let path = "/admin/orgs"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Organization]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List all users

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func adminGetAllUsers(completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        adminGetAllUsersWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List all users
     - GET /admin/users
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token

     - returns: RequestBuilder<[User]> 
     */
    open class func adminGetAllUsersWithRequestBuilder() -> RequestBuilder<[User]> {
        let path = "/admin/users"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[User]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
