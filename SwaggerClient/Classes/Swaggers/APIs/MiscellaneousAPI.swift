//
// MiscellaneousAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class MiscellaneousAPI {
    /**
     Returns the version of the Gitea application

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getVersion(completion: @escaping ((_ data: ServerVersion?,_ error: Error?) -> Void)) {
        getVersionWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Returns the version of the Gitea application
     - GET /version
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token

     - returns: RequestBuilder<ServerVersion> 
     */
    open class func getVersionWithRequestBuilder() -> RequestBuilder<ServerVersion> {
        let path = "/version"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ServerVersion>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Render a markdown document as HTML
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func renderMarkdown(body: MarkdownOption? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        renderMarkdownWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Render a markdown document as HTML
     - POST /markdown
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func renderMarkdownWithRequestBuilder(body: MarkdownOption? = nil) -> RequestBuilder<Void> {
        let path = "/markdown"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Render raw markdown as HTML
     - parameter body: (body) Request body to render 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func renderMarkdownRaw(body: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        renderMarkdownRawWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Render raw markdown as HTML
     - POST /markdown/raw
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter body: (body) Request body to render 

     - returns: RequestBuilder<Void> 
     */
    open class func renderMarkdownRawWithRequestBuilder(body: String) -> RequestBuilder<Void> {
        let path = "/markdown/raw"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
