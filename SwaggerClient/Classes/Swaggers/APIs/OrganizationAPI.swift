//
// OrganizationAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class OrganizationAPI {
    /**
     Create a repository in an organization
     - parameter org: (path) name of organization      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createOrgRepo(org: String, body: CreateRepoOption? = nil, completion: @escaping ((_ data: Repository?,_ error: Error?) -> Void)) {
        createOrgRepoWithRequestBuilder(org: org, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a repository in an organization
     - POST /org/{org}/repos
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter org: (path) name of organization      - parameter body: (body)  (optional)

     - returns: RequestBuilder<Repository> 
     */
    open class func createOrgRepoWithRequestBuilder(org: String, body: CreateRepoOption? = nil) -> RequestBuilder<Repository> {
        var path = "/org/{org}/repos"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Repository>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add a team member
     - parameter _id: (path) id of the team      - parameter username: (path) username of the user to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgAddTeamMember(_id: Int64, username: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgAddTeamMemberWithRequestBuilder(_id: _id, username: username).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Add a team member
     - PUT /teams/{id}/members/{username}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter _id: (path) id of the team      - parameter username: (path) username of the user to add 

     - returns: RequestBuilder<Void> 
     */
    open class func orgAddTeamMemberWithRequestBuilder(_id: Int64, username: String) -> RequestBuilder<Void> {
        var path = "/teams/{id}/members/{username}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Add a repository to a team
     - parameter _id: (path) id of the team      - parameter org: (path) organization that owns the repo to add      - parameter repo: (path) name of the repo to add 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgAddTeamRepository(_id: Int64, org: String, repo: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgAddTeamRepositoryWithRequestBuilder(_id: _id, org: org, repo: repo).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Add a repository to a team
     - PUT /teams/{id}/repos/{org}/{repo}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter _id: (path) id of the team      - parameter org: (path) organization that owns the repo to add      - parameter repo: (path) name of the repo to add 

     - returns: RequestBuilder<Void> 
     */
    open class func orgAddTeamRepositoryWithRequestBuilder(_id: Int64, org: String, repo: String) -> RequestBuilder<Void> {
        var path = "/teams/{id}/repos/{org}/{repo}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Conceal a user's membership
     - parameter org: (path) name of the organization      - parameter username: (path) username of the user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgConcealMember(org: String, username: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgConcealMemberWithRequestBuilder(org: org, username: username).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Conceal a user's membership
     - DELETE /orgs/{org}/public_members/{username}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter org: (path) name of the organization      - parameter username: (path) username of the user 

     - returns: RequestBuilder<Void> 
     */
    open class func orgConcealMemberWithRequestBuilder(org: String, username: String) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/public_members/{username}"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create an organization
     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgCreate(body: CreateOrgOption, completion: @escaping ((_ data: Organization?,_ error: Error?) -> Void)) {
        orgCreateWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create an organization
     - POST /orgs
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter body: (body)  

     - returns: RequestBuilder<Organization> 
     */
    open class func orgCreateWithRequestBuilder(body: CreateOrgOption) -> RequestBuilder<Organization> {
        let path = "/orgs"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Organization>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a hook
     - parameter body: (body)       - parameter org: (path) name of the organization 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgCreateHook(body: CreateHookOption, org: String, completion: @escaping ((_ data: Hook?,_ error: Error?) -> Void)) {
        orgCreateHookWithRequestBuilder(body: body, org: org).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a hook
     - POST /orgs/{org}/hooks/
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter body: (body)       - parameter org: (path) name of the organization 

     - returns: RequestBuilder<Hook> 
     */
    open class func orgCreateHookWithRequestBuilder(body: CreateHookOption, org: String) -> RequestBuilder<Hook> {
        var path = "/orgs/{org}/hooks/"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Hook>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a team
     - parameter org: (path) name of the organization      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgCreateTeam(org: String, body: CreateTeamOption? = nil, completion: @escaping ((_ data: Team?,_ error: Error?) -> Void)) {
        orgCreateTeamWithRequestBuilder(org: org, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a team
     - POST /orgs/{org}/teams
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter org: (path) name of the organization      - parameter body: (body)  (optional)

     - returns: RequestBuilder<Team> 
     */
    open class func orgCreateTeamWithRequestBuilder(org: String, body: CreateTeamOption? = nil) -> RequestBuilder<Team> {
        var path = "/orgs/{org}/teams"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Team>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete an organization
     - parameter org: (path) organization that is to be deleted 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgDelete(org: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgDeleteWithRequestBuilder(org: org).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete an organization
     - DELETE /orgs/{org}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter org: (path) organization that is to be deleted 

     - returns: RequestBuilder<Void> 
     */
    open class func orgDeleteWithRequestBuilder(org: String) -> RequestBuilder<Void> {
        var path = "/orgs/{org}"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a hook
     - parameter org: (path) name of the organization      - parameter _id: (path) id of the hook to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgDeleteHook(org: String, _id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgDeleteHookWithRequestBuilder(org: org, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a hook
     - DELETE /orgs/{org}/hooks/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter org: (path) name of the organization      - parameter _id: (path) id of the hook to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func orgDeleteHookWithRequestBuilder(org: String, _id: Int64) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/hooks/{id}"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove a member from an organization
     - parameter org: (path) name of the organization      - parameter username: (path) username of the user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgDeleteMember(org: String, username: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgDeleteMemberWithRequestBuilder(org: org, username: username).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Remove a member from an organization
     - DELETE /orgs/{org}/members/{username}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter org: (path) name of the organization      - parameter username: (path) username of the user 

     - returns: RequestBuilder<Void> 
     */
    open class func orgDeleteMemberWithRequestBuilder(org: String, username: String) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/members/{username}"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a team
     - parameter _id: (path) id of the team to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgDeleteTeam(_id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgDeleteTeamWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a team
     - DELETE /teams/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter _id: (path) id of the team to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func orgDeleteTeamWithRequestBuilder(_id: Int64) -> RequestBuilder<Void> {
        var path = "/teams/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Edit an organization
     - parameter org: (path) name of the organization to edit      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgEdit(org: String, body: EditOrgOption? = nil, completion: @escaping ((_ data: Organization?,_ error: Error?) -> Void)) {
        orgEditWithRequestBuilder(org: org, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Edit an organization
     - PATCH /orgs/{org}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter org: (path) name of the organization to edit      - parameter body: (body)  (optional)

     - returns: RequestBuilder<Organization> 
     */
    open class func orgEditWithRequestBuilder(org: String, body: EditOrgOption? = nil) -> RequestBuilder<Organization> {
        var path = "/orgs/{org}"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Organization>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a hook
     - parameter org: (path) name of the organization      - parameter _id: (path) id of the hook to update      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgEditHook(org: String, _id: Int64, body: EditHookOption? = nil, completion: @escaping ((_ data: Hook?,_ error: Error?) -> Void)) {
        orgEditHookWithRequestBuilder(org: org, _id: _id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a hook
     - PATCH /orgs/{org}/hooks/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter org: (path) name of the organization      - parameter _id: (path) id of the hook to update      - parameter body: (body)  (optional)

     - returns: RequestBuilder<Hook> 
     */
    open class func orgEditHookWithRequestBuilder(org: String, _id: Int64, body: EditHookOption? = nil) -> RequestBuilder<Hook> {
        var path = "/orgs/{org}/hooks/{id}"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Hook>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Edit a team
     - parameter _id: (path) id of the team to edit      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgEditTeam(_id: Int, body: EditTeamOption? = nil, completion: @escaping ((_ data: Team?,_ error: Error?) -> Void)) {
        orgEditTeamWithRequestBuilder(_id: _id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Edit a team
     - PATCH /teams/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter _id: (path) id of the team to edit      - parameter body: (body)  (optional)

     - returns: RequestBuilder<Team> 
     */
    open class func orgEditTeamWithRequestBuilder(_id: Int, body: EditTeamOption? = nil) -> RequestBuilder<Team> {
        var path = "/teams/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Team>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get an organization
     - parameter org: (path) name of the organization to get 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgGet(org: String, completion: @escaping ((_ data: Organization?,_ error: Error?) -> Void)) {
        orgGetWithRequestBuilder(org: org).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get an organization
     - GET /orgs/{org}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter org: (path) name of the organization to get 

     - returns: RequestBuilder<Organization> 
     */
    open class func orgGetWithRequestBuilder(org: String) -> RequestBuilder<Organization> {
        var path = "/orgs/{org}"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Organization>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a hook
     - parameter org: (path) name of the organization      - parameter _id: (path) id of the hook to get 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgGetHook(org: String, _id: Int64, completion: @escaping ((_ data: Hook?,_ error: Error?) -> Void)) {
        orgGetHookWithRequestBuilder(org: org, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a hook
     - GET /orgs/{org}/hooks/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter org: (path) name of the organization      - parameter _id: (path) id of the hook to get 

     - returns: RequestBuilder<Hook> 
     */
    open class func orgGetHookWithRequestBuilder(org: String, _id: Int64) -> RequestBuilder<Hook> {
        var path = "/orgs/{org}/hooks/{id}"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Hook>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a team
     - parameter _id: (path) id of the team to get 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgGetTeam(_id: Int64, completion: @escaping ((_ data: Team?,_ error: Error?) -> Void)) {
        orgGetTeamWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a team
     - GET /teams/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter _id: (path) id of the team to get 

     - returns: RequestBuilder<Team> 
     */
    open class func orgGetTeamWithRequestBuilder(_id: Int64) -> RequestBuilder<Team> {
        var path = "/teams/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Team>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check if a user is a member of an organization
     - parameter org: (path) name of the organization      - parameter username: (path) username of the user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgIsMember(org: String, username: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgIsMemberWithRequestBuilder(org: org, username: username).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Check if a user is a member of an organization
     - GET /orgs/{org}/members/{username}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter org: (path) name of the organization      - parameter username: (path) username of the user 

     - returns: RequestBuilder<Void> 
     */
    open class func orgIsMemberWithRequestBuilder(org: String, username: String) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/members/{username}"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check if a user is a public member of an organization
     - parameter org: (path) name of the organization      - parameter username: (path) username of the user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgIsPublicMember(org: String, username: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgIsPublicMemberWithRequestBuilder(org: org, username: username).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Check if a user is a public member of an organization
     - GET /orgs/{org}/public_members/{username}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter org: (path) name of the organization      - parameter username: (path) username of the user 

     - returns: RequestBuilder<Void> 
     */
    open class func orgIsPublicMemberWithRequestBuilder(org: String, username: String) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/public_members/{username}"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List the current user's organizations

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgListCurrentUserOrgs(completion: @escaping ((_ data: [Organization]?,_ error: Error?) -> Void)) {
        orgListCurrentUserOrgsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List the current user's organizations
     - GET /user/orgs
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token

     - returns: RequestBuilder<[Organization]> 
     */
    open class func orgListCurrentUserOrgsWithRequestBuilder() -> RequestBuilder<[Organization]> {
        let path = "/user/orgs"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Organization]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List an organization's webhooks
     - parameter org: (path) name of the organization 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgListHooks(org: String, completion: @escaping ((_ data: [Hook]?,_ error: Error?) -> Void)) {
        orgListHooksWithRequestBuilder(org: org).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List an organization's webhooks
     - GET /orgs/{org}/hooks
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter org: (path) name of the organization 

     - returns: RequestBuilder<[Hook]> 
     */
    open class func orgListHooksWithRequestBuilder(org: String) -> RequestBuilder<[Hook]> {
        var path = "/orgs/{org}/hooks"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Hook]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List an organization's members
     - parameter org: (path) name of the organization 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgListMembers(org: String, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        orgListMembersWithRequestBuilder(org: org).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List an organization's members
     - GET /orgs/{org}/members
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter org: (path) name of the organization 

     - returns: RequestBuilder<[User]> 
     */
    open class func orgListMembersWithRequestBuilder(org: String) -> RequestBuilder<[User]> {
        var path = "/orgs/{org}/members"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[User]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List an organization's public members
     - parameter org: (path) name of the organization 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgListPublicMembers(org: String, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        orgListPublicMembersWithRequestBuilder(org: org).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List an organization's public members
     - GET /orgs/{org}/public_members
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter org: (path) name of the organization 

     - returns: RequestBuilder<[User]> 
     */
    open class func orgListPublicMembersWithRequestBuilder(org: String) -> RequestBuilder<[User]> {
        var path = "/orgs/{org}/public_members"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[User]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List an organization's repos
     - parameter org: (path) name of the organization 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgListRepos(org: String, completion: @escaping ((_ data: [Repository]?,_ error: Error?) -> Void)) {
        orgListReposWithRequestBuilder(org: org).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List an organization's repos
     - GET /orgs/{org}/repos
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter org: (path) name of the organization 

     - returns: RequestBuilder<[Repository]> 
     */
    open class func orgListReposWithRequestBuilder(org: String) -> RequestBuilder<[Repository]> {
        var path = "/orgs/{org}/repos"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Repository]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List a particular member of team
     - parameter _id: (path) id of the team      - parameter username: (path) username of the member to list 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgListTeamMember(_id: Int64, username: String, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        orgListTeamMemberWithRequestBuilder(_id: _id, username: username).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List a particular member of team
     - GET /teams/{id}/members/{username}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter _id: (path) id of the team      - parameter username: (path) username of the member to list 

     - returns: RequestBuilder<User> 
     */
    open class func orgListTeamMemberWithRequestBuilder(_id: Int64, username: String) -> RequestBuilder<User> {
        var path = "/teams/{id}/members/{username}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List a team's members
     - parameter _id: (path) id of the team 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgListTeamMembers(_id: Int64, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        orgListTeamMembersWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List a team's members
     - GET /teams/{id}/members
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter _id: (path) id of the team 

     - returns: RequestBuilder<[User]> 
     */
    open class func orgListTeamMembersWithRequestBuilder(_id: Int64) -> RequestBuilder<[User]> {
        var path = "/teams/{id}/members"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[User]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List a team's repos
     - parameter _id: (path) id of the team 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgListTeamRepos(_id: Int64, completion: @escaping ((_ data: [Repository]?,_ error: Error?) -> Void)) {
        orgListTeamReposWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List a team's repos
     - GET /teams/{id}/repos
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter _id: (path) id of the team 

     - returns: RequestBuilder<[Repository]> 
     */
    open class func orgListTeamReposWithRequestBuilder(_id: Int64) -> RequestBuilder<[Repository]> {
        var path = "/teams/{id}/repos"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Repository]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List an organization's teams
     - parameter org: (path) name of the organization 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgListTeams(org: String, completion: @escaping ((_ data: [Team]?,_ error: Error?) -> Void)) {
        orgListTeamsWithRequestBuilder(org: org).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List an organization's teams
     - GET /orgs/{org}/teams
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter org: (path) name of the organization 

     - returns: RequestBuilder<[Team]> 
     */
    open class func orgListTeamsWithRequestBuilder(org: String) -> RequestBuilder<[Team]> {
        var path = "/orgs/{org}/teams"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Team]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List a user's organizations
     - parameter username: (path) username of user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgListUserOrgs(username: String, completion: @escaping ((_ data: [Organization]?,_ error: Error?) -> Void)) {
        orgListUserOrgsWithRequestBuilder(username: username).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List a user's organizations
     - GET /users/{username}/orgs
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter username: (path) username of user 

     - returns: RequestBuilder<[Organization]> 
     */
    open class func orgListUserOrgsWithRequestBuilder(username: String) -> RequestBuilder<[Organization]> {
        var path = "/users/{username}/orgs"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Organization]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Publicize a user's membership
     - parameter org: (path) name of the organization      - parameter username: (path) username of the user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgPublicizeMember(org: String, username: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgPublicizeMemberWithRequestBuilder(org: org, username: username).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Publicize a user's membership
     - PUT /orgs/{org}/public_members/{username}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter org: (path) name of the organization      - parameter username: (path) username of the user 

     - returns: RequestBuilder<Void> 
     */
    open class func orgPublicizeMemberWithRequestBuilder(org: String, username: String) -> RequestBuilder<Void> {
        var path = "/orgs/{org}/public_members/{username}"
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove a team member
     - parameter _id: (path) id of the team      - parameter username: (path) username of the user to remove 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgRemoveTeamMember(_id: Int64, username: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgRemoveTeamMemberWithRequestBuilder(_id: _id, username: username).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Remove a team member
     - DELETE /teams/{id}/members/{username}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter _id: (path) id of the team      - parameter username: (path) username of the user to remove 

     - returns: RequestBuilder<Void> 
     */
    open class func orgRemoveTeamMemberWithRequestBuilder(_id: Int64, username: String) -> RequestBuilder<Void> {
        var path = "/teams/{id}/members/{username}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove a repository from a team
     - parameter _id: (path) id of the team      - parameter org: (path) organization that owns the repo to remove      - parameter repo: (path) name of the repo to remove 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orgRemoveTeamRepository(_id: Int64, org: String, repo: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        orgRemoveTeamRepositoryWithRequestBuilder(_id: _id, org: org, repo: repo).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Remove a repository from a team
     - DELETE /teams/{id}/repos/{org}/{repo}
     - This does not delete the repository, it only removes the repository from the team.
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter _id: (path) id of the team      - parameter org: (path) organization that owns the repo to remove      - parameter repo: (path) name of the repo to remove 

     - returns: RequestBuilder<Void> 
     */
    open class func orgRemoveTeamRepositoryWithRequestBuilder(_id: Int64, org: String, repo: String) -> RequestBuilder<Void> {
        var path = "/teams/{id}/repos/{org}/{repo}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let orgPreEscape = "\(org)"
        let orgPostEscape = orgPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{org}", with: orgPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
