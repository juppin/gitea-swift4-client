//
// UserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class UserAPI {
    /**
     Create a repository
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createCurrentUserRepo(body: CreateRepoOption? = nil, completion: @escaping ((_ data: Repository?,_ error: Error?) -> Void)) {
        createCurrentUserRepoWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a repository
     - POST /user/repos
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Repository> 
     */
    open class func createCurrentUserRepoWithRequestBuilder(body: CreateRepoOption? = nil) -> RequestBuilder<Repository> {
        let path = "/user/repos"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Repository>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add email addresses
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userAddEmail(body: CreateEmailOption? = nil, completion: @escaping ((_ data: [Email]?,_ error: Error?) -> Void)) {
        userAddEmailWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add email addresses
     - POST /user/emails
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<[Email]> 
     */
    open class func userAddEmailWithRequestBuilder(body: CreateEmailOption? = nil) -> RequestBuilder<[Email]> {
        let path = "/user/emails"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Email]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Check if one user is following another user
     - parameter follower: (path) username of following user      - parameter followee: (path) username of followed user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCheckFollowing(follower: String, followee: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userCheckFollowingWithRequestBuilder(follower: follower, followee: followee).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Check if one user is following another user
     - GET /users/{follower}/following/{followee}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter follower: (path) username of following user      - parameter followee: (path) username of followed user 

     - returns: RequestBuilder<Void> 
     */
    open class func userCheckFollowingWithRequestBuilder(follower: String, followee: String) -> RequestBuilder<Void> {
        var path = "/users/{follower}/following/{followee}"
        let followerPreEscape = "\(follower)"
        let followerPostEscape = followerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{follower}", with: followerPostEscape, options: .literal, range: nil)
        let followeePreEscape = "\(followee)"
        let followeePostEscape = followeePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{followee}", with: followeePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create an access token
     - parameter username: (path) username of user      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCreateToken(username: String, body: Any? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userCreateTokenWithRequestBuilder(username: username, body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create an access token
     - POST /users/{username}/tokens
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - responseHeaders: [sha1(String), name(String), id(Int64)]
     - responseHeaders: [sha1(String), name(String), id(Int64)]
     - responseHeaders: [sha1(String), name(String), id(Int64)]
     - parameter username: (path) username of user      - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func userCreateTokenWithRequestBuilder(username: String, body: Any? = nil) -> RequestBuilder<Void> {
        var path = "/users/{username}/tokens"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Check whether a user is followed by the authenticated user
     - parameter username: (path) username of followed user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCurrentCheckFollowing(username: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userCurrentCheckFollowingWithRequestBuilder(username: username).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Check whether a user is followed by the authenticated user
     - GET /user/following/{username}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter username: (path) username of followed user 

     - returns: RequestBuilder<Void> 
     */
    open class func userCurrentCheckFollowingWithRequestBuilder(username: String) -> RequestBuilder<Void> {
        var path = "/user/following/{username}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Whether the authenticated is starring the repo
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCurrentCheckStarring(owner: String, repo: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userCurrentCheckStarringWithRequestBuilder(owner: owner, repo: repo).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Whether the authenticated is starring the repo
     - GET /user/starred/{owner}/{repo}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 

     - returns: RequestBuilder<Void> 
     */
    open class func userCurrentCheckStarringWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<Void> {
        var path = "/user/starred/{owner}/{repo}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unfollow a user
     - parameter username: (path) username of user to unfollow 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCurrentDeleteFollow(username: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userCurrentDeleteFollowWithRequestBuilder(username: username).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Unfollow a user
     - DELETE /user/following/{username}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter username: (path) username of user to unfollow 

     - returns: RequestBuilder<Void> 
     */
    open class func userCurrentDeleteFollowWithRequestBuilder(username: String) -> RequestBuilder<Void> {
        var path = "/user/following/{username}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove a GPG key
     - parameter _id: (path) id of key to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCurrentDeleteGPGKey(_id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userCurrentDeleteGPGKeyWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Remove a GPG key
     - DELETE /user/gpg_keys/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter _id: (path) id of key to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func userCurrentDeleteGPGKeyWithRequestBuilder(_id: Int64) -> RequestBuilder<Void> {
        var path = "/user/gpg_keys/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a public key
     - parameter _id: (path) id of key to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCurrentDeleteKey(_id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userCurrentDeleteKeyWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a public key
     - DELETE /user/keys/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter _id: (path) id of key to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func userCurrentDeleteKeyWithRequestBuilder(_id: Int64) -> RequestBuilder<Void> {
        var path = "/user/keys/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Unstar the given repo
     - parameter owner: (path) owner of the repo to unstar      - parameter repo: (path) name of the repo to unstar 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCurrentDeleteStar(owner: String, repo: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userCurrentDeleteStarWithRequestBuilder(owner: owner, repo: repo).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Unstar the given repo
     - DELETE /user/starred/{owner}/{repo}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo to unstar      - parameter repo: (path) name of the repo to unstar 

     - returns: RequestBuilder<Void> 
     */
    open class func userCurrentDeleteStarWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<Void> {
        var path = "/user/starred/{owner}/{repo}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a GPG key
     - parameter _id: (path) id of key to get 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCurrentGetGPGKey(_id: Int64, completion: @escaping ((_ data: GPGKey?,_ error: Error?) -> Void)) {
        userCurrentGetGPGKeyWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a GPG key
     - GET /user/gpg_keys/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter _id: (path) id of key to get 

     - returns: RequestBuilder<GPGKey> 
     */
    open class func userCurrentGetGPGKeyWithRequestBuilder(_id: Int64) -> RequestBuilder<GPGKey> {
        var path = "/user/gpg_keys/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GPGKey>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a public key
     - parameter _id: (path) id of key to get 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCurrentGetKey(_id: Int64, completion: @escaping ((_ data: PublicKey?,_ error: Error?) -> Void)) {
        userCurrentGetKeyWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a public key
     - GET /user/keys/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter _id: (path) id of key to get 

     - returns: RequestBuilder<PublicKey> 
     */
    open class func userCurrentGetKeyWithRequestBuilder(_id: Int64) -> RequestBuilder<PublicKey> {
        var path = "/user/keys/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PublicKey>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List the authenticated user's followers

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCurrentListFollowers(completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        userCurrentListFollowersWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List the authenticated user's followers
     - GET /user/followers
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token

     - returns: RequestBuilder<[User]> 
     */
    open class func userCurrentListFollowersWithRequestBuilder() -> RequestBuilder<[User]> {
        let path = "/user/followers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[User]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List the users that the authenticated user is following

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCurrentListFollowing(completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        userCurrentListFollowingWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List the users that the authenticated user is following
     - GET /user/following
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token

     - returns: RequestBuilder<[User]> 
     */
    open class func userCurrentListFollowingWithRequestBuilder() -> RequestBuilder<[User]> {
        let path = "/user/following"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[User]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List the authenticated user's GPG keys

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCurrentListGPGKeys(completion: @escaping ((_ data: [GPGKey]?,_ error: Error?) -> Void)) {
        userCurrentListGPGKeysWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List the authenticated user's GPG keys
     - GET /user/gpg_keys
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token

     - returns: RequestBuilder<[GPGKey]> 
     */
    open class func userCurrentListGPGKeysWithRequestBuilder() -> RequestBuilder<[GPGKey]> {
        let path = "/user/gpg_keys"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[GPGKey]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List the authenticated user's public keys
     - parameter fingerprint: (query) fingerprint of the key (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCurrentListKeys(fingerprint: String? = nil, completion: @escaping ((_ data: [PublicKey]?,_ error: Error?) -> Void)) {
        userCurrentListKeysWithRequestBuilder(fingerprint: fingerprint).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List the authenticated user's public keys
     - GET /user/keys
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter fingerprint: (query) fingerprint of the key (optional)

     - returns: RequestBuilder<[PublicKey]> 
     */
    open class func userCurrentListKeysWithRequestBuilder(fingerprint: String? = nil) -> RequestBuilder<[PublicKey]> {
        let path = "/user/keys"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fingerprint": fingerprint
        ])

        let requestBuilder: RequestBuilder<[PublicKey]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List the repos that the authenticated user owns or has access to

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCurrentListRepos(completion: @escaping ((_ data: [Repository]?,_ error: Error?) -> Void)) {
        userCurrentListReposWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List the repos that the authenticated user owns or has access to
     - GET /user/repos
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token

     - returns: RequestBuilder<[Repository]> 
     */
    open class func userCurrentListReposWithRequestBuilder() -> RequestBuilder<[Repository]> {
        let path = "/user/repos"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Repository]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     The repos that the authenticated user has starred

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCurrentListStarred(completion: @escaping ((_ data: [Repository]?,_ error: Error?) -> Void)) {
        userCurrentListStarredWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     The repos that the authenticated user has starred
     - GET /user/starred
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token

     - returns: RequestBuilder<[Repository]> 
     */
    open class func userCurrentListStarredWithRequestBuilder() -> RequestBuilder<[Repository]> {
        let path = "/user/starred"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Repository]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List repositories watched by the authenticated user

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCurrentListSubscriptions(completion: @escaping ((_ data: [Repository]?,_ error: Error?) -> Void)) {
        userCurrentListSubscriptionsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List repositories watched by the authenticated user
     - GET /user/subscriptions
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token

     - returns: RequestBuilder<[Repository]> 
     */
    open class func userCurrentListSubscriptionsWithRequestBuilder() -> RequestBuilder<[Repository]> {
        let path = "/user/subscriptions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Repository]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Create a GPG key
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCurrentPostGPGKey(body: CreateGPGKeyOption? = nil, completion: @escaping ((_ data: GPGKey?,_ error: Error?) -> Void)) {
        userCurrentPostGPGKeyWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a GPG key
     - POST /user/gpg_keys
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<GPGKey> 
     */
    open class func userCurrentPostGPGKeyWithRequestBuilder(body: CreateGPGKeyOption? = nil) -> RequestBuilder<GPGKey> {
        let path = "/user/gpg_keys"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GPGKey>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a public key
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCurrentPostKey(body: CreateKeyOption? = nil, completion: @escaping ((_ data: PublicKey?,_ error: Error?) -> Void)) {
        userCurrentPostKeyWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a public key
     - POST /user/keys
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<PublicKey> 
     */
    open class func userCurrentPostKeyWithRequestBuilder(body: CreateKeyOption? = nil) -> RequestBuilder<PublicKey> {
        let path = "/user/keys"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PublicKey>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Follow a user
     - parameter username: (path) username of user to follow 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCurrentPutFollow(username: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userCurrentPutFollowWithRequestBuilder(username: username).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Follow a user
     - PUT /user/following/{username}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter username: (path) username of user to follow 

     - returns: RequestBuilder<Void> 
     */
    open class func userCurrentPutFollowWithRequestBuilder(username: String) -> RequestBuilder<Void> {
        var path = "/user/following/{username}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Star the given repo
     - parameter owner: (path) owner of the repo to star      - parameter repo: (path) name of the repo to star 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCurrentPutStar(owner: String, repo: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userCurrentPutStarWithRequestBuilder(owner: owner, repo: repo).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Star the given repo
     - PUT /user/starred/{owner}/{repo}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo to star      - parameter repo: (path) name of the repo to star 

     - returns: RequestBuilder<Void> 
     */
    open class func userCurrentPutStarWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<Void> {
        var path = "/user/starred/{owner}/{repo}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List the current user's tracked times

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userCurrentTrackedTimes(completion: @escaping ((_ data: [TrackedTime]?,_ error: Error?) -> Void)) {
        userCurrentTrackedTimesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List the current user's tracked times
     - GET /user/times
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token

     - returns: RequestBuilder<[TrackedTime]> 
     */
    open class func userCurrentTrackedTimesWithRequestBuilder() -> RequestBuilder<[TrackedTime]> {
        let path = "/user/times"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[TrackedTime]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     delete an access token
     - parameter username: (path) username of user      - parameter token: (path) token to be deleted 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userDeleteAccessToken(username: String, token: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userDeleteAccessTokenWithRequestBuilder(username: username, token: token).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     delete an access token
     - DELETE /users/{username}/tokens/{token}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter username: (path) username of user      - parameter token: (path) token to be deleted 

     - returns: RequestBuilder<Void> 
     */
    open class func userDeleteAccessTokenWithRequestBuilder(username: String, token: Int64) -> RequestBuilder<Void> {
        var path = "/users/{username}/tokens/{token}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let tokenPreEscape = "\(token)"
        let tokenPostEscape = tokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{token}", with: tokenPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete email addresses
     - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userDeleteEmail(body: DeleteEmailOption? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userDeleteEmailWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete email addresses
     - DELETE /user/emails
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter body: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func userDeleteEmailWithRequestBuilder(body: DeleteEmailOption? = nil) -> RequestBuilder<Void> {
        let path = "/user/emails"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Get a user
     - parameter username: (path) username of user to get 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userGet(username: String, completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        userGetWithRequestBuilder(username: username).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a user
     - GET /users/{username}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter username: (path) username of user to get 

     - returns: RequestBuilder<User> 
     */
    open class func userGetWithRequestBuilder(username: String) -> RequestBuilder<User> {
        var path = "/users/{username}"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get the authenticated user

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userGetCurrent(completion: @escaping ((_ data: User?,_ error: Error?) -> Void)) {
        userGetCurrentWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get the authenticated user
     - GET /user
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token

     - returns: RequestBuilder<User> 
     */
    open class func userGetCurrentWithRequestBuilder() -> RequestBuilder<User> {
        let path = "/user"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<User>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a user's heatmap
     - parameter username: (path) username of user to get 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userGetHeatmapData(username: String, completion: @escaping ((_ data: [UserHeatmapData]?,_ error: Error?) -> Void)) {
        userGetHeatmapDataWithRequestBuilder(username: username).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a user's heatmap
     - GET /users/{username}/heatmap
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter username: (path) username of user to get 

     - returns: RequestBuilder<[UserHeatmapData]> 
     */
    open class func userGetHeatmapDataWithRequestBuilder(username: String) -> RequestBuilder<[UserHeatmapData]> {
        var path = "/users/{username}/heatmap"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[UserHeatmapData]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List the authenticated user's access tokens
     - parameter username: (path) username of user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userGetTokens(username: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userGetTokensWithRequestBuilder(username: username).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     List the authenticated user's access tokens
     - GET /users/{username}/tokens
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter username: (path) username of user 

     - returns: RequestBuilder<Void> 
     */
    open class func userGetTokensWithRequestBuilder(username: String) -> RequestBuilder<Void> {
        var path = "/users/{username}/tokens"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List the authenticated user's email addresses

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userListEmails(completion: @escaping ((_ data: [Email]?,_ error: Error?) -> Void)) {
        userListEmailsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List the authenticated user's email addresses
     - GET /user/emails
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token

     - returns: RequestBuilder<[Email]> 
     */
    open class func userListEmailsWithRequestBuilder() -> RequestBuilder<[Email]> {
        let path = "/user/emails"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Email]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List the given user's followers
     - parameter username: (path) username of user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userListFollowers(username: String, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        userListFollowersWithRequestBuilder(username: username).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List the given user's followers
     - GET /users/{username}/followers
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter username: (path) username of user 

     - returns: RequestBuilder<[User]> 
     */
    open class func userListFollowersWithRequestBuilder(username: String) -> RequestBuilder<[User]> {
        var path = "/users/{username}/followers"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[User]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List the users that the given user is following
     - parameter username: (path) username of user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userListFollowing(username: String, completion: @escaping ((_ data: [User]?,_ error: Error?) -> Void)) {
        userListFollowingWithRequestBuilder(username: username).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List the users that the given user is following
     - GET /users/{username}/following
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter username: (path) username of user 

     - returns: RequestBuilder<[User]> 
     */
    open class func userListFollowingWithRequestBuilder(username: String) -> RequestBuilder<[User]> {
        var path = "/users/{username}/following"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[User]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List the given user's GPG keys
     - parameter username: (path) username of user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userListGPGKeys(username: String, completion: @escaping ((_ data: [GPGKey]?,_ error: Error?) -> Void)) {
        userListGPGKeysWithRequestBuilder(username: username).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List the given user's GPG keys
     - GET /users/{username}/gpg_keys
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter username: (path) username of user 

     - returns: RequestBuilder<[GPGKey]> 
     */
    open class func userListGPGKeysWithRequestBuilder(username: String) -> RequestBuilder<[GPGKey]> {
        var path = "/users/{username}/gpg_keys"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[GPGKey]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List the given user's public keys
     - parameter username: (path) username of user      - parameter fingerprint: (query) fingerprint of the key (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userListKeys(username: String, fingerprint: String? = nil, completion: @escaping ((_ data: [PublicKey]?,_ error: Error?) -> Void)) {
        userListKeysWithRequestBuilder(username: username, fingerprint: fingerprint).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List the given user's public keys
     - GET /users/{username}/keys
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter username: (path) username of user      - parameter fingerprint: (query) fingerprint of the key (optional)

     - returns: RequestBuilder<[PublicKey]> 
     */
    open class func userListKeysWithRequestBuilder(username: String, fingerprint: String? = nil) -> RequestBuilder<[PublicKey]> {
        var path = "/users/{username}/keys"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "fingerprint": fingerprint
        ])

        let requestBuilder: RequestBuilder<[PublicKey]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List the repos owned by the given user
     - parameter username: (path) username of user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userListRepos(username: String, completion: @escaping ((_ data: [Repository]?,_ error: Error?) -> Void)) {
        userListReposWithRequestBuilder(username: username).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List the repos owned by the given user
     - GET /users/{username}/repos
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter username: (path) username of user 

     - returns: RequestBuilder<[Repository]> 
     */
    open class func userListReposWithRequestBuilder(username: String) -> RequestBuilder<[Repository]> {
        var path = "/users/{username}/repos"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Repository]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     The repos that the given user has starred
     - parameter username: (path) username of user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userListStarred(username: String, completion: @escaping ((_ data: [Repository]?,_ error: Error?) -> Void)) {
        userListStarredWithRequestBuilder(username: username).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     The repos that the given user has starred
     - GET /users/{username}/starred
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter username: (path) username of user 

     - returns: RequestBuilder<[Repository]> 
     */
    open class func userListStarredWithRequestBuilder(username: String) -> RequestBuilder<[Repository]> {
        var path = "/users/{username}/starred"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Repository]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List the repositories watched by a user
     - parameter username: (path) username of the user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userListSubscriptions(username: String, completion: @escaping ((_ data: [Repository]?,_ error: Error?) -> Void)) {
        userListSubscriptionsWithRequestBuilder(username: username).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List the repositories watched by a user
     - GET /users/{username}/subscriptions
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter username: (path) username of the user 

     - returns: RequestBuilder<[Repository]> 
     */
    open class func userListSubscriptionsWithRequestBuilder(username: String) -> RequestBuilder<[Repository]> {
        var path = "/users/{username}/subscriptions"
        let usernamePreEscape = "\(username)"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Repository]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List all the teams a user belongs to

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userListTeams(completion: @escaping ((_ data: [Team]?,_ error: Error?) -> Void)) {
        userListTeamsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List all the teams a user belongs to
     - GET /user/teams
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token

     - returns: RequestBuilder<[Team]> 
     */
    open class func userListTeamsWithRequestBuilder() -> RequestBuilder<[Team]> {
        let path = "/user/teams"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Team]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Search for users
     - parameter q: (query) keyword (optional)     - parameter uid: (query) ID of the user to search for (optional)     - parameter limit: (query) maximum number of users to return (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userSearch(q: String? = nil, uid: Int64? = nil, limit: Int? = nil, completion: @escaping ((_ data: Any?,_ error: Error?) -> Void)) {
        userSearchWithRequestBuilder(q: q, uid: uid, limit: limit).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Search for users
     - GET /users/search
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter q: (query) keyword (optional)     - parameter uid: (query) ID of the user to search for (optional)     - parameter limit: (query) maximum number of users to return (optional)

     - returns: RequestBuilder<Any> 
     */
    open class func userSearchWithRequestBuilder(q: String? = nil, uid: Int64? = nil, limit: Int? = nil) -> RequestBuilder<Any> {
        let path = "/users/search"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "q": q, 
                        "uid": uid?.encodeToJSON(), 
                        "limit": limit?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Any>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List a user's tracked times in a repo
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter user: (path) username of user 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userTrackedTimes(owner: String, repo: String, user: String, completion: @escaping ((_ data: [TrackedTime]?,_ error: Error?) -> Void)) {
        userTrackedTimesWithRequestBuilder(owner: owner, repo: repo, user: user).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List a user's tracked times in a repo
     - GET /repos/{owner}/{repo}/times/{user}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter user: (path) username of user 

     - returns: RequestBuilder<[TrackedTime]> 
     */
    open class func userTrackedTimesWithRequestBuilder(owner: String, repo: String, user: String) -> RequestBuilder<[TrackedTime]> {
        var path = "/repos/{owner}/{repo}/times/{user}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let userPreEscape = "\(user)"
        let userPostEscape = userPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{user}", with: userPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[TrackedTime]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
