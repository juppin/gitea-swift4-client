//
// IssueAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class IssueAPI {
    /**
     Add a label to an issue
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the issue      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueAddLabel(owner: String, repo: String, index: Int64, body: IssueLabelsOption? = nil, completion: @escaping ((_ data: [Label]?,_ error: Error?) -> Void)) {
        issueAddLabelWithRequestBuilder(owner: owner, repo: repo, index: index, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add a label to an issue
     - POST /repos/{owner}/{repo}/issues/{index}/labels
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the issue      - parameter body: (body)  (optional)

     - returns: RequestBuilder<[Label]> 
     */
    open class func issueAddLabelWithRequestBuilder(owner: String, repo: String, index: Int64, body: IssueLabelsOption? = nil) -> RequestBuilder<[Label]> {
        var path = "/repos/{owner}/{repo}/issues/{index}/labels"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Label]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Add a tracked time to a issue
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) index of the issue to add tracked time to      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueAddTime(owner: String, repo: String, _id: Int64, body: AddTimeOption? = nil, completion: @escaping ((_ data: TrackedTime?,_ error: Error?) -> Void)) {
        issueAddTimeWithRequestBuilder(owner: owner, repo: repo, _id: _id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add a tracked time to a issue
     - POST /repos/{owner}/{repo}/issues/{id}/times
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) index of the issue to add tracked time to      - parameter body: (body)  (optional)

     - returns: RequestBuilder<TrackedTime> 
     */
    open class func issueAddTimeWithRequestBuilder(owner: String, repo: String, _id: Int64, body: AddTimeOption? = nil) -> RequestBuilder<TrackedTime> {
        var path = "/repos/{owner}/{repo}/issues/{id}/times"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<TrackedTime>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Remove all labels from an issue
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the issue 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueClearLabels(owner: String, repo: String, index: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        issueClearLabelsWithRequestBuilder(owner: owner, repo: repo, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Remove all labels from an issue
     - DELETE /repos/{owner}/{repo}/issues/{index}/labels
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the issue 

     - returns: RequestBuilder<Void> 
     */
    open class func issueClearLabelsWithRequestBuilder(owner: String, repo: String, index: Int64) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/issues/{index}/labels"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Add a comment to an issue
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the issue      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueCreateComment(owner: String, repo: String, index: Int64, body: CreateIssueCommentOption? = nil, completion: @escaping ((_ data: Comment?,_ error: Error?) -> Void)) {
        issueCreateCommentWithRequestBuilder(owner: owner, repo: repo, index: index, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Add a comment to an issue
     - POST /repos/{owner}/{repo}/issues/{index}/comments
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the issue      - parameter body: (body)  (optional)

     - returns: RequestBuilder<Comment> 
     */
    open class func issueCreateCommentWithRequestBuilder(owner: String, repo: String, index: Int64, body: CreateIssueCommentOption? = nil) -> RequestBuilder<Comment> {
        var path = "/repos/{owner}/{repo}/issues/{index}/comments"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Comment>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create an issue. If using deadline only the date will be taken into account, and time of day ignored.
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueCreateIssue(owner: String, repo: String, body: CreateIssueOption? = nil, completion: @escaping ((_ data: Issue?,_ error: Error?) -> Void)) {
        issueCreateIssueWithRequestBuilder(owner: owner, repo: repo, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create an issue. If using deadline only the date will be taken into account, and time of day ignored.
     - POST /repos/{owner}/{repo}/issues
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter body: (body)  (optional)

     - returns: RequestBuilder<Issue> 
     */
    open class func issueCreateIssueWithRequestBuilder(owner: String, repo: String, body: CreateIssueOption? = nil) -> RequestBuilder<Issue> {
        var path = "/repos/{owner}/{repo}/issues"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Issue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a label
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueCreateLabel(owner: String, repo: String, body: CreateLabelOption? = nil, completion: @escaping ((_ data: Label?,_ error: Error?) -> Void)) {
        issueCreateLabelWithRequestBuilder(owner: owner, repo: repo, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a label
     - POST /repos/{owner}/{repo}/labels
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter body: (body)  (optional)

     - returns: RequestBuilder<Label> 
     */
    open class func issueCreateLabelWithRequestBuilder(owner: String, repo: String, body: CreateLabelOption? = nil) -> RequestBuilder<Label> {
        var path = "/repos/{owner}/{repo}/labels"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Label>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Create a milestone
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueCreateMilestone(owner: String, repo: String, body: CreateMilestoneOption? = nil, completion: @escaping ((_ data: Milestone?,_ error: Error?) -> Void)) {
        issueCreateMilestoneWithRequestBuilder(owner: owner, repo: repo, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Create a milestone
     - POST /repos/{owner}/{repo}/milestones
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter body: (body)  (optional)

     - returns: RequestBuilder<Milestone> 
     */
    open class func issueCreateMilestoneWithRequestBuilder(owner: String, repo: String, body: CreateMilestoneOption? = nil) -> RequestBuilder<Milestone> {
        var path = "/repos/{owner}/{repo}/milestones"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Milestone>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Delete a comment
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of comment to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueDeleteComment(owner: String, repo: String, _id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        issueDeleteCommentWithRequestBuilder(owner: owner, repo: repo, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a comment
     - DELETE /repos/{owner}/{repo}/issues/comments/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of comment to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func issueDeleteCommentWithRequestBuilder(owner: String, repo: String, _id: Int64) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/issues/comments/{id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a comment
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) this parameter is ignored      - parameter _id: (path) id of comment to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueDeleteCommentDeprecated(owner: String, repo: String, index: Int, _id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        issueDeleteCommentDeprecatedWithRequestBuilder(owner: owner, repo: repo, index: index, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a comment
     - DELETE /repos/{owner}/{repo}/issues/{index}/comments/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) this parameter is ignored      - parameter _id: (path) id of comment to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func issueDeleteCommentDeprecatedWithRequestBuilder(owner: String, repo: String, index: Int, _id: Int64) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/issues/{index}/comments/{id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{index}", with: indexPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a label
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the label to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueDeleteLabel(owner: String, repo: String, _id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        issueDeleteLabelWithRequestBuilder(owner: owner, repo: repo, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a label
     - DELETE /repos/{owner}/{repo}/labels/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the label to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func issueDeleteLabelWithRequestBuilder(owner: String, repo: String, _id: Int64) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/labels/{id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a milestone
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the milestone to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueDeleteMilestone(owner: String, repo: String, _id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        issueDeleteMilestoneWithRequestBuilder(owner: owner, repo: repo, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a milestone
     - DELETE /repos/{owner}/{repo}/milestones/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the milestone to delete 

     - returns: RequestBuilder<Void> 
     */
    open class func issueDeleteMilestoneWithRequestBuilder(owner: String, repo: String, _id: Int64) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/milestones/{id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Edit a comment
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the comment to edit      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueEditComment(owner: String, repo: String, _id: Int64, body: EditIssueCommentOption? = nil, completion: @escaping ((_ data: Comment?,_ error: Error?) -> Void)) {
        issueEditCommentWithRequestBuilder(owner: owner, repo: repo, _id: _id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Edit a comment
     - PATCH /repos/{owner}/{repo}/issues/comments/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the comment to edit      - parameter body: (body)  (optional)

     - returns: RequestBuilder<Comment> 
     */
    open class func issueEditCommentWithRequestBuilder(owner: String, repo: String, _id: Int64, body: EditIssueCommentOption? = nil) -> RequestBuilder<Comment> {
        var path = "/repos/{owner}/{repo}/issues/comments/{id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Comment>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Edit a comment
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) this parameter is ignored      - parameter _id: (path) id of the comment to edit      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueEditCommentDeprecated(owner: String, repo: String, index: Int, _id: Int64, body: EditIssueCommentOption? = nil, completion: @escaping ((_ data: Comment?,_ error: Error?) -> Void)) {
        issueEditCommentDeprecatedWithRequestBuilder(owner: owner, repo: repo, index: index, _id: _id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Edit a comment
     - PATCH /repos/{owner}/{repo}/issues/{index}/comments/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) this parameter is ignored      - parameter _id: (path) id of the comment to edit      - parameter body: (body)  (optional)

     - returns: RequestBuilder<Comment> 
     */
    open class func issueEditCommentDeprecatedWithRequestBuilder(owner: String, repo: String, index: Int, _id: Int64, body: EditIssueCommentOption? = nil) -> RequestBuilder<Comment> {
        var path = "/repos/{owner}/{repo}/issues/{index}/comments/{id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{index}", with: indexPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Comment>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Edit an issue. If using deadline only the date will be taken into account, and time of day ignored.
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the issue to edit      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueEditIssue(owner: String, repo: String, index: Int64, body: EditIssueOption? = nil, completion: @escaping ((_ data: Issue?,_ error: Error?) -> Void)) {
        issueEditIssueWithRequestBuilder(owner: owner, repo: repo, index: index, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Edit an issue. If using deadline only the date will be taken into account, and time of day ignored.
     - PATCH /repos/{owner}/{repo}/issues/{index}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the issue to edit      - parameter body: (body)  (optional)

     - returns: RequestBuilder<Issue> 
     */
    open class func issueEditIssueWithRequestBuilder(owner: String, repo: String, index: Int64, body: EditIssueOption? = nil) -> RequestBuilder<Issue> {
        var path = "/repos/{owner}/{repo}/issues/{index}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Issue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Set an issue deadline. If set to null, the deadline is deleted. If using deadline only the date will be taken into account, and time of day ignored.
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the issue to create or update a deadline on      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueEditIssueDeadline(owner: String, repo: String, index: Int64, body: EditDeadlineOption? = nil, completion: @escaping ((_ data: IssueDeadline?,_ error: Error?) -> Void)) {
        issueEditIssueDeadlineWithRequestBuilder(owner: owner, repo: repo, index: index, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Set an issue deadline. If set to null, the deadline is deleted. If using deadline only the date will be taken into account, and time of day ignored.
     - POST /repos/{owner}/{repo}/issues/{index}/deadline
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the issue to create or update a deadline on      - parameter body: (body)  (optional)

     - returns: RequestBuilder<IssueDeadline> 
     */
    open class func issueEditIssueDeadlineWithRequestBuilder(owner: String, repo: String, index: Int64, body: EditDeadlineOption? = nil) -> RequestBuilder<IssueDeadline> {
        var path = "/repos/{owner}/{repo}/issues/{index}/deadline"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<IssueDeadline>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a label
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the label to edit      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueEditLabel(owner: String, repo: String, _id: Int64, body: EditLabelOption? = nil, completion: @escaping ((_ data: Label?,_ error: Error?) -> Void)) {
        issueEditLabelWithRequestBuilder(owner: owner, repo: repo, _id: _id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a label
     - PATCH /repos/{owner}/{repo}/labels/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the label to edit      - parameter body: (body)  (optional)

     - returns: RequestBuilder<Label> 
     */
    open class func issueEditLabelWithRequestBuilder(owner: String, repo: String, _id: Int64, body: EditLabelOption? = nil) -> RequestBuilder<Label> {
        var path = "/repos/{owner}/{repo}/labels/{id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Label>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update a milestone
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the milestone      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueEditMilestone(owner: String, repo: String, _id: Int64, body: EditMilestoneOption? = nil, completion: @escaping ((_ data: Milestone?,_ error: Error?) -> Void)) {
        issueEditMilestoneWithRequestBuilder(owner: owner, repo: repo, _id: _id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Update a milestone
     - PATCH /repos/{owner}/{repo}/milestones/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the milestone      - parameter body: (body)  (optional)

     - returns: RequestBuilder<Milestone> 
     */
    open class func issueEditMilestoneWithRequestBuilder(owner: String, repo: String, _id: Int64, body: EditMilestoneOption? = nil) -> RequestBuilder<Milestone> {
        var path = "/repos/{owner}/{repo}/milestones/{id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Milestone>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     List all comments on an issue
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the issue      - parameter since: (query) if provided, only comments updated since the specified time are returned. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueGetComments(owner: String, repo: String, index: Int64, since: String? = nil, completion: @escaping ((_ data: [Comment]?,_ error: Error?) -> Void)) {
        issueGetCommentsWithRequestBuilder(owner: owner, repo: repo, index: index, since: since).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List all comments on an issue
     - GET /repos/{owner}/{repo}/issues/{index}/comments
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the issue      - parameter since: (query) if provided, only comments updated since the specified time are returned. (optional)

     - returns: RequestBuilder<[Comment]> 
     */
    open class func issueGetCommentsWithRequestBuilder(owner: String, repo: String, index: Int64, since: String? = nil) -> RequestBuilder<[Comment]> {
        var path = "/repos/{owner}/{repo}/issues/{index}/comments"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "since": since
        ])

        let requestBuilder: RequestBuilder<[Comment]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get an issue
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the issue to get 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueGetIssue(owner: String, repo: String, index: Int64, completion: @escaping ((_ data: Issue?,_ error: Error?) -> Void)) {
        issueGetIssueWithRequestBuilder(owner: owner, repo: repo, index: index).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get an issue
     - GET /repos/{owner}/{repo}/issues/{index}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the issue to get 

     - returns: RequestBuilder<Issue> 
     */
    open class func issueGetIssueWithRequestBuilder(owner: String, repo: String, index: Int64) -> RequestBuilder<Issue> {
        var path = "/repos/{owner}/{repo}/issues/{index}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Issue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a single label
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the label to get 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueGetLabel(owner: String, repo: String, _id: Int64, completion: @escaping ((_ data: Label?,_ error: Error?) -> Void)) {
        issueGetLabelWithRequestBuilder(owner: owner, repo: repo, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a single label
     - GET /repos/{owner}/{repo}/labels/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the label to get 

     - returns: RequestBuilder<Label> 
     */
    open class func issueGetLabelWithRequestBuilder(owner: String, repo: String, _id: Int64) -> RequestBuilder<Label> {
        var path = "/repos/{owner}/{repo}/labels/{id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Label>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get an issue's labels
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the issue 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueGetLabels(owner: String, repo: String, index: Int64, completion: @escaping ((_ data: [Label]?,_ error: Error?) -> Void)) {
        issueGetLabelsWithRequestBuilder(owner: owner, repo: repo, index: index).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get an issue's labels
     - GET /repos/{owner}/{repo}/issues/{index}/labels
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the issue 

     - returns: RequestBuilder<[Label]> 
     */
    open class func issueGetLabelsWithRequestBuilder(owner: String, repo: String, index: Int64) -> RequestBuilder<[Label]> {
        var path = "/repos/{owner}/{repo}/issues/{index}/labels"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Label]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a milestone
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the milestone 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueGetMilestone(owner: String, repo: String, _id: Int64, completion: @escaping ((_ data: Milestone?,_ error: Error?) -> Void)) {
        issueGetMilestoneWithRequestBuilder(owner: owner, repo: repo, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get a milestone
     - GET /repos/{owner}/{repo}/milestones/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) id of the milestone 

     - returns: RequestBuilder<Milestone> 
     */
    open class func issueGetMilestoneWithRequestBuilder(owner: String, repo: String, _id: Int64) -> RequestBuilder<Milestone> {
        var path = "/repos/{owner}/{repo}/milestones/{id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Milestone>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all of a repository's opened milestones
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueGetMilestonesList(owner: String, repo: String, completion: @escaping ((_ data: [Milestone]?,_ error: Error?) -> Void)) {
        issueGetMilestonesListWithRequestBuilder(owner: owner, repo: repo).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all of a repository's opened milestones
     - GET /repos/{owner}/{repo}/milestones
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 

     - returns: RequestBuilder<[Milestone]> 
     */
    open class func issueGetMilestonesListWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<[Milestone]> {
        var path = "/repos/{owner}/{repo}/milestones"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Milestone]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List all comments in a repository
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter since: (query) if provided, only comments updated since the provided time are returned. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueGetRepoComments(owner: String, repo: String, since: String? = nil, completion: @escaping ((_ data: [Comment]?,_ error: Error?) -> Void)) {
        issueGetRepoCommentsWithRequestBuilder(owner: owner, repo: repo, since: since).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List all comments in a repository
     - GET /repos/{owner}/{repo}/issues/comments
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter since: (query) if provided, only comments updated since the provided time are returned. (optional)

     - returns: RequestBuilder<[Comment]> 
     */
    open class func issueGetRepoCommentsWithRequestBuilder(owner: String, repo: String, since: String? = nil) -> RequestBuilder<[Comment]> {
        var path = "/repos/{owner}/{repo}/issues/comments"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "since": since
        ])

        let requestBuilder: RequestBuilder<[Comment]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List a repository's issues
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter state: (query) whether issue is open or closed (optional)     - parameter labels: (query) comma separated list of labels. Fetch only issues that have any of this labels. Non existent labels are discarded (optional)     - parameter page: (query) page number of requested issues (optional)     - parameter q: (query) search string (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueListIssues(owner: String, repo: String, state: String? = nil, labels: String? = nil, page: Int? = nil, q: String? = nil, completion: @escaping ((_ data: [Issue]?,_ error: Error?) -> Void)) {
        issueListIssuesWithRequestBuilder(owner: owner, repo: repo, state: state, labels: labels, page: page, q: q).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List a repository's issues
     - GET /repos/{owner}/{repo}/issues
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter state: (query) whether issue is open or closed (optional)     - parameter labels: (query) comma separated list of labels. Fetch only issues that have any of this labels. Non existent labels are discarded (optional)     - parameter page: (query) page number of requested issues (optional)     - parameter q: (query) search string (optional)

     - returns: RequestBuilder<[Issue]> 
     */
    open class func issueListIssuesWithRequestBuilder(owner: String, repo: String, state: String? = nil, labels: String? = nil, page: Int? = nil, q: String? = nil) -> RequestBuilder<[Issue]> {
        var path = "/repos/{owner}/{repo}/issues"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "state": state, 
                        "labels": labels, 
                        "page": page?.encodeToJSON(), 
                        "q": q
        ])

        let requestBuilder: RequestBuilder<[Issue]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all of a repository's labels
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueListLabels(owner: String, repo: String, completion: @escaping ((_ data: [Label]?,_ error: Error?) -> Void)) {
        issueListLabelsWithRequestBuilder(owner: owner, repo: repo).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all of a repository's labels
     - GET /repos/{owner}/{repo}/labels
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo 

     - returns: RequestBuilder<[Label]> 
     */
    open class func issueListLabelsWithRequestBuilder(owner: String, repo: String) -> RequestBuilder<[Label]> {
        var path = "/repos/{owner}/{repo}/labels"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Label]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Remove a label from an issue
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the issue      - parameter _id: (path) id of the label to remove 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueRemoveLabel(owner: String, repo: String, index: Int64, _id: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        issueRemoveLabelWithRequestBuilder(owner: owner, repo: repo, index: index, _id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Remove a label from an issue
     - DELETE /repos/{owner}/{repo}/issues/{index}/labels/{id}
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the issue      - parameter _id: (path) id of the label to remove 

     - returns: RequestBuilder<Void> 
     */
    open class func issueRemoveLabelWithRequestBuilder(owner: String, repo: String, index: Int64, _id: Int64) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/issues/{index}/labels/{id}"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{index}", with: indexPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Replace an issue's labels
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the issue      - parameter body: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueReplaceLabels(owner: String, repo: String, index: Int64, body: IssueLabelsOption? = nil, completion: @escaping ((_ data: [Label]?,_ error: Error?) -> Void)) {
        issueReplaceLabelsWithRequestBuilder(owner: owner, repo: repo, index: index, body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Replace an issue's labels
     - PUT /repos/{owner}/{repo}/issues/{index}/labels
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the issue      - parameter body: (body)  (optional)

     - returns: RequestBuilder<[Label]> 
     */
    open class func issueReplaceLabelsWithRequestBuilder(owner: String, repo: String, index: Int64, body: IssueLabelsOption? = nil) -> RequestBuilder<[Label]> {
        var path = "/repos/{owner}/{repo}/issues/{index}/labels"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[Label]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Start stopwatch on an issue.
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the issue to create the stopwatch on 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueStartStopWatch(owner: String, repo: String, index: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        issueStartStopWatchWithRequestBuilder(owner: owner, repo: repo, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Start stopwatch on an issue.
     - POST /repos/{owner}/{repo}/issues/{index}/stopwatch/start
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the issue to create the stopwatch on 

     - returns: RequestBuilder<Void> 
     */
    open class func issueStartStopWatchWithRequestBuilder(owner: String, repo: String, index: Int64) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/issues/{index}/stopwatch/start"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Stop an issue's existing stopwatch.
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the issue to stop the stopwatch on 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueStopWatch(owner: String, repo: String, index: Int64, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        issueStopWatchWithRequestBuilder(owner: owner, repo: repo, index: index).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Stop an issue's existing stopwatch.
     - POST /repos/{owner}/{repo}/issues/{index}/stopwatch/stop
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter index: (path) index of the issue to stop the stopwatch on 

     - returns: RequestBuilder<Void> 
     */
    open class func issueStopWatchWithRequestBuilder(owner: String, repo: String, index: Int64) -> RequestBuilder<Void> {
        var path = "/repos/{owner}/{repo}/issues/{index}/stopwatch/stop"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let indexPreEscape = "\(index)"
        let indexPostEscape = indexPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{index}", with: indexPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List an issue's tracked times
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) index of the issue 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueTrackedTimes(owner: String, repo: String, _id: Int64, completion: @escaping ((_ data: [TrackedTime]?,_ error: Error?) -> Void)) {
        issueTrackedTimesWithRequestBuilder(owner: owner, repo: repo, _id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     List an issue's tracked times
     - GET /repos/{owner}/{repo}/issues/{id}/times
     - API Key:
       - type: apiKey access_token (QUERY)
       - name: AccessToken
     - API Key:
       - type: apiKey Authorization 
       - name: AuthorizationHeaderToken
     - BASIC:
       - type: http
       - name: BasicAuth
     - API Key:
       - type: apiKey Sudo 
       - name: SudoHeader
     - API Key:
       - type: apiKey sudo (QUERY)
       - name: SudoParam
     - API Key:
       - type: apiKey token (QUERY)
       - name: Token
     - parameter owner: (path) owner of the repo      - parameter repo: (path) name of the repo      - parameter _id: (path) index of the issue 

     - returns: RequestBuilder<[TrackedTime]> 
     */
    open class func issueTrackedTimesWithRequestBuilder(owner: String, repo: String, _id: Int64) -> RequestBuilder<[TrackedTime]> {
        var path = "/repos/{owner}/{repo}/issues/{id}/times"
        let ownerPreEscape = "\(owner)"
        let ownerPostEscape = ownerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{owner}", with: ownerPostEscape, options: .literal, range: nil)
        let repoPreEscape = "\(repo)"
        let repoPostEscape = repoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{repo}", with: repoPostEscape, options: .literal, range: nil)
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[TrackedTime]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
